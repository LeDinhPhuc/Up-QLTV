package quanlythuvien;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import java.awt.Desktop;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Date;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.apache.poi.openxml4j.opc.OPCPackage;
import org.apache.poi.xwpf.usermodel.IBodyElement;
import org.apache.poi.xwpf.usermodel.TableRowAlign;
import org.apache.poi.xwpf.usermodel.XWPFDocument;
import org.apache.poi.xwpf.usermodel.XWPFParagraph;
import org.apache.poi.xwpf.usermodel.XWPFRun;
import org.apache.poi.xwpf.usermodel.XWPFTable;
import org.apache.poi.xwpf.usermodel.XWPFTableRow;
import sun.swing.table.DefaultTableCellHeaderRenderer;

/**
 *
 * @author Đình Phúc
 */
public class QuanLyMuonTra extends javax.swing.JFrame {

    /**
     * Creates new form QuanLyNhanVien
     */
    DefaultTableModel model1, model2;
    MyConnect myConnect = new MyConnect();
    Connection conn = myConnect.connect();
    PreparedStatement ps = null;
    private static int rowID1 = 0;
    private static int rowID2 = 0;
    private static int hsPhat = 500;   // hệ số tiền phạt

    public QuanLyMuonTra() {
        initComponents();
        model1 = (DefaultTableModel) Table1.getModel();
        model2 = (DefaultTableModel) Table2.getModel();
        for (MuonTra mt : getListMT()) {
            showTable1(mt);
        }
        showTable2(getListCTMT());
        for (String maSach : getListMaSach()) {
            cbBoxMaSach.addItem(maSach);
        }
        for (String maDG : getListMaDG()) {
            cbBoxMaDG.addItem(maDG);
        }
        for (String maNV : getListMaNV()) {
            cbBoxMaNV.addItem(maNV);
        }
        xuatCTMT.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jDesktopPane2 = new javax.swing.JDesktopPane();
        jLabel14 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table1 = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        Table2 = new javax.swing.JTable();
        cbBoxTimKiem = new javax.swing.JComboBox<>();
        xuatCTMT = new javax.swing.JButton();
        timKiem = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        ngayMuon = new javax.swing.JTextField();
        maMuon = new javax.swing.JTextField();
        hanTra = new javax.swing.JTextField();
        cbBoxMaDG = new javax.swing.JComboBox<>();
        cbBoxMaNV = new javax.swing.JComboBox<>();
        maNV = new javax.swing.JLabel();
        maDG = new javax.swing.JLabel();
        jLayeredPane2 = new javax.swing.JLayeredPane();
        jLabel2 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLayeredPane3 = new javax.swing.JLayeredPane();
        SuaMT = new javax.swing.JButton();
        XoaMT = new javax.swing.JButton();
        themMT = new javax.swing.JButton();
        jLayeredPane4 = new javax.swing.JLayeredPane();
        SuaCTMT = new javax.swing.JButton();
        XoaCTMT = new javax.swing.JButton();
        ThemCTMT = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLayeredPane7 = new javax.swing.JLayeredPane();
        ngayTra = new javax.swing.JTextField();
        ghiChu = new javax.swing.JTextField();
        tienCoc = new javax.swing.JTextField();
        lbTenSach = new javax.swing.JLabel();
        cbBoxMaSach = new javax.swing.JComboBox<>();
        jLayeredPane5 = new javax.swing.JLayeredPane();
        jLabel15 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        lbMaMuon = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jDesktopPane1 = new javax.swing.JDesktopPane();
        TKMuonTra = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        Table3 = new javax.swing.JTable();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        jButton10 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        time = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setTitle("LÊ ĐÌNH PHÚC _ 20163184 _ Quản Lý Mượn Trả");

        jTabbedPane1.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N

        jDesktopPane2.setBackground(new java.awt.Color(0, 102, 102));
        jDesktopPane2.setPreferredSize(new java.awt.Dimension(1574, 980));

        jLabel14.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setText("Thông Tin Mượn Trả");

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Mượn Trả");

        jLabel18.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(255, 255, 255));
        jLabel18.setText("Chi Tiết Mượn Trả");

        Table1.setAutoCreateRowSorter(true);
        Table1.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        Table1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "        Mã Mượn ", "Mã Độc Giả", "Mã Nhân Viên", "Ngày Mượn ", "Hạn Trả"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        Table1.setRowHeight(22);
        Table1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Table1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(Table1);

        Table2.setAutoCreateRowSorter(true);
        Table2.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        Table2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "       Mã Mượn ", "        Mã Sách", "      Tên Sách", "        Ngày Trả ", "    Tiền Cọc ", "      Tiền Phạt", "   Ghi Chú"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        Table2.setRowHeight(22);
        Table2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Table2MouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(Table2);
        if (Table2.getColumnModel().getColumnCount() > 0) {
            Table2.getColumnModel().getColumn(5).setResizable(false);
        }

        cbBoxTimKiem.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        cbBoxTimKiem.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tìm Kiếm Theo Mã Mượn Trả ", "Tìm Kiếm Theo Mã Độc Giả", "Tìm Kiếm Theo Mã Sách", "Tìm Kiếm Theo Mã Nhân Viên", "Tìm Kiếm Theo Ngày Trả" }));
        cbBoxTimKiem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbBoxTimKiemActionPerformed(evt);
            }
        });

        xuatCTMT.setBackground(new java.awt.Color(13, 255, 0));
        xuatCTMT.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        xuatCTMT.setIcon(new javax.swing.ImageIcon(getClass().getResource("/quanlythuvien/icon/if_output-1_2916359.png"))); // NOI18N
        xuatCTMT.setText("Xuất File");
        xuatCTMT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                xuatCTMTActionPerformed(evt);
            }
        });

        timKiem.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        timKiem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timKiemActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Tìm Kiếm:");

        ngayMuon.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        ngayMuon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ngayMuonActionPerformed(evt);
            }
        });

        maMuon.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N

        hanTra.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        hanTra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hanTraActionPerformed(evt);
            }
        });

        cbBoxMaDG.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        cbBoxMaDG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbBoxMaDGActionPerformed(evt);
            }
        });

        cbBoxMaNV.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        cbBoxMaNV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbBoxMaNVActionPerformed(evt);
            }
        });

        maNV.setFont(new java.awt.Font("Tahoma", 2, 15)); // NOI18N
        maNV.setForeground(new java.awt.Color(255, 255, 255));
        maNV.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        maDG.setBackground(new java.awt.Color(204, 204, 255));
        maDG.setFont(new java.awt.Font("Tahoma", 2, 15)); // NOI18N
        maDG.setForeground(new java.awt.Color(255, 255, 255));
        maDG.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        maDG.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jLayeredPane1.setLayer(ngayMuon, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(maMuon, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(hanTra, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(cbBoxMaDG, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(cbBoxMaNV, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(maNV, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(maDG, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jLayeredPane1Layout.createSequentialGroup()
                        .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cbBoxMaNV, 0, 65, Short.MAX_VALUE)
                            .addComponent(cbBoxMaDG, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(maNV, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(maDG, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(maMuon, javax.swing.GroupLayout.DEFAULT_SIZE, 242, Short.MAX_VALUE)
                        .addComponent(ngayMuon)
                        .addComponent(hanTra)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addComponent(maMuon, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(maDG, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE)
                    .addComponent(cbBoxMaDG, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(cbBoxMaNV, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(maNV, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(ngayMuon, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(hanTra, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Mã Độc Giả");

        jLabel16.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(255, 255, 255));
        jLabel16.setText("Ngày Mượn");

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Mã Mượn");

        jLabel19.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(255, 255, 255));
        jLabel19.setText("Hạn Trả");

        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("Mã Nhân Viên");

        jLayeredPane2.setLayer(jLabel2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane2.setLayer(jLabel16, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane2.setLayer(jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane2.setLayer(jLabel19, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane2.setLayer(jLabel12, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane2Layout = new javax.swing.GroupLayout(jLayeredPane2);
        jLayeredPane2.setLayout(jLayeredPane2Layout);
        jLayeredPane2Layout.setHorizontalGroup(
            jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel12)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jLabel16, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel19, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jLayeredPane2Layout.setVerticalGroup(
            jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane2Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel1)
                .addGap(38, 38, 38)
                .addComponent(jLabel2)
                .addGap(38, 38, 38)
                .addComponent(jLabel12)
                .addGap(38, 38, 38)
                .addComponent(jLabel16)
                .addGap(38, 38, 38)
                .addComponent(jLabel19)
                .addGap(25, 25, 25))
        );

        SuaMT.setBackground(new java.awt.Color(255, 255, 51));
        SuaMT.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        SuaMT.setIcon(new javax.swing.ImageIcon(getClass().getResource("/quanlythuvien/icon/sửa.png"))); // NOI18N
        SuaMT.setText("Sửa");
        SuaMT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SuaMTActionPerformed(evt);
            }
        });

        XoaMT.setBackground(new java.awt.Color(255, 0, 0));
        XoaMT.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        XoaMT.setIcon(new javax.swing.ImageIcon(getClass().getResource("/quanlythuvien/icon/remove.png"))); // NOI18N
        XoaMT.setText("Xóa");
        XoaMT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                XoaMTActionPerformed(evt);
            }
        });

        themMT.setBackground(new java.awt.Color(102, 255, 102));
        themMT.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        themMT.setIcon(new javax.swing.ImageIcon(getClass().getResource("/quanlythuvien/icon/ínert.png"))); // NOI18N
        themMT.setText("Thêm");
        themMT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                themMTActionPerformed(evt);
            }
        });

        jLayeredPane3.setLayer(SuaMT, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane3.setLayer(XoaMT, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane3.setLayer(themMT, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane3Layout = new javax.swing.GroupLayout(jLayeredPane3);
        jLayeredPane3.setLayout(jLayeredPane3Layout);
        jLayeredPane3Layout.setHorizontalGroup(
            jLayeredPane3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(themMT)
                .addGap(56, 56, 56)
                .addComponent(SuaMT)
                .addGap(59, 59, 59)
                .addComponent(XoaMT)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jLayeredPane3Layout.setVerticalGroup(
            jLayeredPane3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jLayeredPane3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jLayeredPane3Layout.createSequentialGroup()
                        .addComponent(themMT, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(3, 3, 3))
                    .addGroup(jLayeredPane3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(SuaMT)
                        .addComponent(XoaMT)))
                .addContainerGap())
        );

        SuaCTMT.setBackground(new java.awt.Color(255, 255, 51));
        SuaCTMT.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        SuaCTMT.setIcon(new javax.swing.ImageIcon(getClass().getResource("/quanlythuvien/icon/sửa.png"))); // NOI18N
        SuaCTMT.setText("Sửa");
        SuaCTMT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SuaCTMTActionPerformed(evt);
            }
        });

        XoaCTMT.setBackground(new java.awt.Color(255, 0, 0));
        XoaCTMT.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        XoaCTMT.setIcon(new javax.swing.ImageIcon(getClass().getResource("/quanlythuvien/icon/remove.png"))); // NOI18N
        XoaCTMT.setText("Xóa");
        XoaCTMT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                XoaCTMTActionPerformed(evt);
            }
        });

        ThemCTMT.setBackground(new java.awt.Color(102, 255, 102));
        ThemCTMT.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        ThemCTMT.setIcon(new javax.swing.ImageIcon(getClass().getResource("/quanlythuvien/icon/ínert.png"))); // NOI18N
        ThemCTMT.setText("Thêm");
        ThemCTMT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ThemCTMTActionPerformed(evt);
            }
        });

        jLayeredPane4.setLayer(SuaCTMT, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane4.setLayer(XoaCTMT, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane4.setLayer(ThemCTMT, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane4Layout = new javax.swing.GroupLayout(jLayeredPane4);
        jLayeredPane4.setLayout(jLayeredPane4Layout);
        jLayeredPane4Layout.setHorizontalGroup(
            jLayeredPane4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane4Layout.createSequentialGroup()
                .addComponent(ThemCTMT, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53)
                .addComponent(SuaCTMT)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE)
                .addComponent(XoaCTMT)
                .addContainerGap())
        );

        jLayeredPane4Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {SuaCTMT, XoaCTMT});

        jLayeredPane4Layout.setVerticalGroup(
            jLayeredPane4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jLayeredPane4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(XoaCTMT)
                    .addComponent(ThemCTMT)
                    .addComponent(SuaCTMT))
                .addContainerGap())
        );

        jLayeredPane4Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {SuaCTMT, ThemCTMT, XoaCTMT});

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Chi Tiết Mượn Trả: Mã Mượn");

        ngayTra.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        ngayTra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ngayTraActionPerformed(evt);
            }
        });

        ghiChu.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        ghiChu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ghiChuActionPerformed(evt);
            }
        });

        tienCoc.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        tienCoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tienCocActionPerformed(evt);
            }
        });

        lbTenSach.setFont(new java.awt.Font("Tahoma", 2, 16)); // NOI18N
        lbTenSach.setForeground(new java.awt.Color(255, 255, 255));
        lbTenSach.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);

        cbBoxMaSach.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        cbBoxMaSach.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbBoxMaSachActionPerformed(evt);
            }
        });

        jLabel15.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(255, 255, 255));
        jLabel15.setText("Tiền Cọc");

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("Ngày Trả");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Ghi Chú");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Tên Sách");

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Mã Sách");

        jLayeredPane5.setLayer(jLabel15, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane5.setLayer(jLabel11, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane5.setLayer(jLabel4, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane5.setLayer(jLabel6, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane5.setLayer(jLabel10, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane5Layout = new javax.swing.GroupLayout(jLayeredPane5);
        jLayeredPane5.setLayout(jLayeredPane5Layout);
        jLayeredPane5Layout.setHorizontalGroup(
            jLayeredPane5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jLayeredPane5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jLayeredPane5Layout.createSequentialGroup()
                        .addGroup(jLayeredPane5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel15)
                            .addComponent(jLabel4)
                            .addComponent(jLabel6)
                            .addComponent(jLabel10))
                        .addContainerGap(13, Short.MAX_VALUE))))
        );
        jLayeredPane5Layout.setVerticalGroup(
            jLayeredPane5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane5Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(jLabel10)
                .addGap(28, 28, 28)
                .addComponent(jLabel6)
                .addGap(40, 40, 40)
                .addComponent(jLabel11)
                .addGap(42, 42, 42)
                .addComponent(jLabel15)
                .addGap(41, 41, 41)
                .addComponent(jLabel4)
                .addContainerGap())
        );

        jLayeredPane7.setLayer(ngayTra, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane7.setLayer(ghiChu, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane7.setLayer(tienCoc, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane7.setLayer(lbTenSach, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane7.setLayer(cbBoxMaSach, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane7.setLayer(jLayeredPane5, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane7Layout = new javax.swing.GroupLayout(jLayeredPane7);
        jLayeredPane7.setLayout(jLayeredPane7Layout);
        jLayeredPane7Layout.setHorizontalGroup(
            jLayeredPane7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLayeredPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jLayeredPane7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jLayeredPane7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(lbTenSach, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(tienCoc, javax.swing.GroupLayout.DEFAULT_SIZE, 245, Short.MAX_VALUE)
                        .addComponent(ngayTra)
                        .addComponent(ghiChu))
                    .addComponent(cbBoxMaSach, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40))
        );
        jLayeredPane7Layout.setVerticalGroup(
            jLayeredPane7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane7Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(cbBoxMaSach, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbTenSach, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(ngayTra, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(tienCoc, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(ghiChu, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jLayeredPane7Layout.createSequentialGroup()
                .addComponent(jLayeredPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );

        lbMaMuon.setBackground(new java.awt.Color(204, 204, 255));
        lbMaMuon.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        lbMaMuon.setForeground(new java.awt.Color(255, 51, 51));

        jButton1.setBackground(new java.awt.Color(255, 153, 0));
        jButton1.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jButton1.setIcon(new javax.swing.ImageIcon("C:\\Users\\Dinh Phuc\\Documents\\NetBeansProjects\\Quanlythuvien\\src\\quanlythuvien\\icon\\reset.png")); // NOI18N
        jButton1.setText("Reset");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jDesktopPane2.setLayer(jLabel14, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(jLabel8, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(jLabel18, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(jScrollPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(jScrollPane4, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(cbBoxTimKiem, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(xuatCTMT, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(timKiem, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(jLabel3, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(jLayeredPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(jLayeredPane2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(jLayeredPane3, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(jLayeredPane4, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(jLabel5, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(jLayeredPane7, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(lbMaMuon, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(jButton1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jDesktopPane2Layout = new javax.swing.GroupLayout(jDesktopPane2);
        jDesktopPane2.setLayout(jDesktopPane2Layout);
        jDesktopPane2Layout.setHorizontalGroup(
            jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDesktopPane2Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 720, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 814, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(jDesktopPane2Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jDesktopPane2Layout.createSequentialGroup()
                        .addGroup(jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jDesktopPane2Layout.createSequentialGroup()
                                .addComponent(jLayeredPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12)
                                .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel14))
                        .addGap(170, 170, 170)
                        .addGroup(jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jDesktopPane2Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lbMaMuon, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jDesktopPane2Layout.createSequentialGroup()
                                .addGap(13, 13, 13)
                                .addComponent(jLayeredPane7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(50, 50, 50)
                                .addGroup(jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDesktopPane2Layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addGap(30, 30, 30)
                                        .addComponent(timKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jDesktopPane2Layout.createSequentialGroup()
                                        .addComponent(cbBoxTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(23, 23, 23)
                                        .addGroup(jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(xuatCTMT, javax.swing.GroupLayout.Alignment.TRAILING)))))))
                    .addGroup(jDesktopPane2Layout.createSequentialGroup()
                        .addComponent(jLayeredPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLayeredPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(450, 450, 450)))
                .addGap(53, 53, 53))
            .addGroup(jDesktopPane2Layout.createSequentialGroup()
                .addGap(325, 325, 325)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel18)
                .addGap(354, 354, 354))
        );
        jDesktopPane2Layout.setVerticalGroup(
            jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopPane2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbMaMuon, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jDesktopPane2Layout.createSequentialGroup()
                        .addGroup(jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLayeredPane1)
                            .addComponent(jLayeredPane2)
                            .addComponent(jLayeredPane7, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLayeredPane3)
                            .addComponent(jLayeredPane4)))
                    .addGroup(jDesktopPane2Layout.createSequentialGroup()
                        .addGroup(jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(timKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbBoxTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(xuatCTMT, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jLabel18))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 490, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPane2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jDesktopPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 933, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Cập Nhật & Tìm Kiếm", jPanel3);

        jDesktopPane1.setBackground(new java.awt.Color(0, 51, 51));

        TKMuonTra.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        TKMuonTra.setForeground(new java.awt.Color(255, 255, 255));
        TKMuonTra.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        TKMuonTra.setText("Thống Kê Phiếu Mượn Trả");
        TKMuonTra.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        TKMuonTra.setVerifyInputWhenFocusTarget(false);
        TKMuonTra.setVerticalTextPosition(javax.swing.SwingConstants.TOP);

        Table3.setAutoCreateRowSorter(true);
        Table3.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        Table3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        Table3.setGridColor(new java.awt.Color(0, 0, 0));
        Table3.setRowHeight(26);
        jScrollPane3.setViewportView(Table3);

        jButton7.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/quanlythuvien/icon/statistic.png"))); // NOI18N
        jButton7.setText("Cho độc giả");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jButton8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/quanlythuvien/icon/statistic.png"))); // NOI18N
        jButton8.setText("Cho nhân viên");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jButton9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/quanlythuvien/icon/statistic.png"))); // NOI18N
        jButton9.setText("Tổng Quát ");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel13.setText("GVHD: ThS. LÊ THỊ HOA");

        jButton10.setBackground(new java.awt.Color(13, 255, 0));
        jButton10.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jButton10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/quanlythuvien/icon/if_output-1_2916359.png"))); // NOI18N
        jButton10.setText("Xuất File");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Nhập thời gian: ");

        time.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        time.setToolTipText("YYYY-MM-DD");

        jLabel9.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("- Nếu bạn để trống sẽ thống kê các năm");

        jLabel17.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(255, 255, 255));
        jLabel17.setText("- Nhập năm sẽ thông kê theo từng tháng  trong năm đó");

        jLabel20.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(255, 255, 255));
        jLabel20.setText("- Nhập tháng sẽ thống kê từng ngày trong tháng đó");

        jLabel21.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(255, 255, 255));
        jLabel21.setText("- Nhập ngày sẽ thống kê tại ngày hôm đó");

        jLabel22.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabel22.setForeground(new java.awt.Color(255, 255, 255));
        jLabel22.setText("* Lưu ý: ");

        jDesktopPane1.setLayer(TKMuonTra, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jScrollPane3, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jButton7, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jButton8, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jButton9, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jLabel13, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jButton10, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jLabel7, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(time, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jLabel9, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jLabel17, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jLabel20, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jLabel21, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jLabel22, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jDesktopPane1Layout = new javax.swing.GroupLayout(jDesktopPane1);
        jDesktopPane1.setLayout(jDesktopPane1Layout);
        jDesktopPane1Layout.setHorizontalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDesktopPane1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDesktopPane1Layout.createSequentialGroup()
                                .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(time, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton10))
                                .addGap(68, 68, 68))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDesktopPane1Layout.createSequentialGroup()
                                .addComponent(TKMuonTra, javax.swing.GroupLayout.PREFERRED_SIZE, 435, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))))
                    .addGroup(jDesktopPane1Layout.createSequentialGroup()
                        .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jDesktopPane1Layout.createSequentialGroup()
                                    .addGap(20, 20, 20)
                                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 395, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jDesktopPane1Layout.createSequentialGroup()
                                    .addGap(38, 38, 38)
                                    .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jLabel7)
                                        .addComponent(jButton8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jButton9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                            .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel20, javax.swing.GroupLayout.DEFAULT_SIZE, 377, Short.MAX_VALUE)
                                .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel21, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel22)))
                        .addGap(37, 37, 37)))
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 1122, Short.MAX_VALUE))
        );

        jDesktopPane1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel17, jLabel20, jLabel21, jLabel9});

        jDesktopPane1Layout.setVerticalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(TKMuonTra, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(time, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addComponent(jButton9)
                .addGap(45, 45, 45)
                .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton8))
                .addGap(42, 42, 42)
                .addComponent(jButton7)
                .addGap(57, 57, 57)
                .addComponent(jLabel22)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addComponent(jLabel17)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 946, Short.MAX_VALUE)
        );

        jDesktopPane1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel17, jLabel9});

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPane1)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPane1)
        );

        jTabbedPane1.addTab("Thống Kê", jPanel5);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /*----------------------------- Khởi tạo  --------------------------------*/
    public ArrayList<MuonTra> getListMT() {          //Đọc dữ liệu trong database
        ArrayList<MuonTra> muonTra = new ArrayList<MuonTra>();
        String sql = "SELECT * FROM muontra";
        try {
            ps = conn.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                MuonTra mt = new MuonTra();
                mt.setMaMuon(rs.getString("MaMuon_LDP"));
                mt.setMaDG(rs.getString("MaDG_LDP"));
                mt.setMaNV(rs.getString("MaNV_LDP"));
                mt.setNgayMuon(rs.getString("NgayMuon_LDP"));
                mt.setHanTra(rs.getString("HanTra_LDP"));
                muonTra.add(mt);    //thêm vào mảng
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error: " + ex.getMessage());
        }
        return muonTra;
    }

    public ArrayList<CTMuonTra> getListCTMT() {          //Đọc dữ liệu trong database
        ArrayList<CTMuonTra> ctMuonTra = new ArrayList<CTMuonTra>();
        String sql = "SELECT * FROM ctmuontra;";
        try {
            ps = conn.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                CTMuonTra ctmt = new CTMuonTra();
                ctmt.setMaMuon(rs.getString("MaMuon_LDP"));
                ctmt.setMaSach(rs.getString("MaSach_LDP"));
                ctmt.setNgayTra(rs.getString("NgayTra_LDP"));
                ctmt.setTienCoc(Integer.parseInt(rs.getString("TienCoc_LDP")));
                ctmt.setTienPhat(Integer.parseInt(rs.getString("TienPhat_LDP")));
                ctmt.setGhiChu(rs.getString("GhiChu_LDP"));
                ctMuonTra.add(ctmt);    //thêm vào mảng
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error: " + ex.getMessage());
        }
        return ctMuonTra;
    }

    public ArrayList<CTMuonTra> getListCTMT2(String maMuon) {          //Đọc dữ liệu trong database
        ArrayList<CTMuonTra> ctMuonTra = new ArrayList<CTMuonTra>();
        String sql = "SELECT * FROM ctmuontra Where MaMuon_LDP = '" + maMuon + "';";
        try {
            ps = conn.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                CTMuonTra ctmt = new CTMuonTra();
                ctmt.setMaMuon(rs.getString("MaMuon_LDP"));
                ctmt.setMaSach(rs.getString("MaSach_LDP"));
                ctmt.setNgayTra(rs.getString("NgayTra_LDP"));
                ctmt.setTienCoc(Integer.parseInt(rs.getString("TienCoc_LDP")));
                ctmt.setTienPhat(Integer.parseInt(rs.getString("TienPhat_LDP")));
                ctmt.setGhiChu(rs.getString("GhiChu_LDP"));
                ctMuonTra.add(ctmt);    //thêm vào mảng
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error: " + ex.getMessage());
        }
        return ctMuonTra;
    }

    public void showTable1(MuonTra mt) {
        model1.addRow(new Object[]{
            mt.getMaMuon(), mt.getMaDG(), mt.getMaNV(), mt.getNgayMuon(), mt.getHanTra()
        });
    }

    public void showTable2(ArrayList<CTMuonTra> ctMuonTra) {
        removeAllRow2();
        for (CTMuonTra ctmt : ctMuonTra) {
            model2.addRow(new Object[]{
                ctmt.getMaMuon(), ctmt.getMaSach(), getTenSach(ctmt.getMaSach()), ctmt.getNgayTra(),
                ctmt.getTienCoc(), ctmt.getTienPhat(), ctmt.getGhiChu()
            });
        }
    }

    public void showTKCTMT(String maMuon) {
        DefaultTableModel model2 = (DefaultTableModel) Table2.getModel();
        for (CTMuonTra ctmt : getListCTMT2(maMuon)) {
            model2.addRow(new Object[]{
                ctmt.getMaMuon(), ctmt.getMaSach(), getTenSach(ctmt.getMaSach()), ctmt.getNgayTra(),
                ctmt.getTienCoc(), ctmt.getTienPhat(), ctmt.getGhiChu()
            });
        }
    }

    // Xóa tất cả các dòng của bảng 1
    public void removeAllRow1() {
        DefaultTableModel modelDelete = (DefaultTableModel) Table1.getModel();
        modelDelete.setRowCount(0);
        if (modelDelete.getRowCount() != 0) {
            modelDelete.setRowCount(0);
        }
    }

    //  Xóa tất cả các dòng của bảng 2
    public void removeAllRow2() {
        DefaultTableModel modelDelete = (DefaultTableModel) Table2.getModel();
        modelDelete.setRowCount(0);
        if (modelDelete.getRowCount() != 0) {
            modelDelete.setRowCount(0);
        }
    }

    public void removeAllRow3() {
        DefaultTableModel modelDelete = (DefaultTableModel) Table3.getModel();
        modelDelete.setRowCount(0);
        if (modelDelete.getRowCount() != 0) {
            modelDelete.setRowCount(0);
        }
    }

    //Đọc dữ liệu trong database
    public ArrayList<String> getListMaSach() {          
        ArrayList<String> listMaSach = new ArrayList<String>();
        String sql = "SELECT MaSach_LDP FROM SACH";
        try {
            ps = conn.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String ms = rs.getString("MaSach_LDP");
                listMaSach.add(ms);    //thêm vào mảng
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error: " + ex.getMessage());
        }
        return listMaSach;
    }

    public String getTenSach(String maSach) {
        String tenSach = null;
        String sql = "SELECT TenSach_LDP "
                + "FROM  quanlythuvien.SACH "
                + "WHERE MaSach_LDP = '" + maSach + "';";
        try {
            ps = conn.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                tenSach = rs.getString("TenSach_LDP");
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error: " + ex.getMessage());
        }
        return tenSach;
    }

    public ArrayList<String> getListMaDG() {          //Đọc dữ liệu trong database
        ArrayList<String> listMaDG = new ArrayList<String>();
        String maDG = null;
        String sql = "SELECT MaDG_LDP FROM DOCGIA";
        try {
            ps = conn.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                maDG = rs.getString("MaDG_LDP");
                listMaDG.add(maDG);    //thêm vào mảng
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error: " + ex.getMessage());
        }
        return listMaDG;
    }

    public String getTenDG(String maDG) {
        String tenDG = null;
        String sql = "SELECT TenDG_LDP "
                + "FROM  quanlythuvien.DOCGIA "
                + "WHERE MaDG_LDP = '" + maDG + "';";
        try {
            ps = conn.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                tenDG = rs.getString("TenDG_LDP");
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error: " + ex.getMessage());
        }
        return tenDG;
    }

    public ArrayList<String> getListMaNV() {          //Đọc dữ liệu trong database
        ArrayList<String> listMaNV = new ArrayList<String>();
        String maNV = null;
        String sql = "SELECT MaNV_LDP FROM NHANVIEN";
        try {
            ps = conn.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                maNV = rs.getString("MaNV_LDP");
                listMaNV.add(maNV);    //thêm vào mảng
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error: " + ex.getMessage());
        }
        return listMaNV;
    }

    public String getTenNV(String maNV) {
        String tenNV = null;
        String sql = "SELECT TenNV_LDP "
                + "FROM  quanlythuvien.NHANVIEN "
                + "WHERE MaNV_LDP = '" + maNV + "';";
        try {
            ps = conn.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                tenNV = rs.getString("TenNV_LDP");
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error: " + ex.getMessage());
        }
        return tenNV;
    }

    /*------------------------------Chức năng Cập Nhật --------------------------------*/
    public void clearData1() {
        maMuon.setText("");
        maDG.setText("");
        maNV.setText("");
        ngayMuon.setText("");
        hanTra.setText("");
    }

    public void clearData2() {
        ngayTra.setText("");
        ghiChu.setText("");
        tienCoc.setText("");
        lbMaMuon.setText("");
    }

    public boolean addMT(MuonTra mt) {               //Thêm sách vào database
        String sql = "INSERT INTO `quanlythuvien`.`muontra` "
                + "(`MaMuon_LDP`, `MaDG_LDP`, `MaNV_LDP`, `NgayMuon_LDP`, `HanTra_LDP`) "
                + "VALUES (?,?,?,?,?);";
        try {
            ps = conn.prepareStatement(sql);
            ps.setString(1, mt.getMaMuon());
            ps.setString(2, mt.getMaDG());
            ps.setString(3, mt.getMaNV());
            ps.setString(4, mt.getNgayMuon());
            ps.setString(5, mt.getHanTra());
            int kt = ps.executeUpdate();
            if (kt != 0) {
                JOptionPane.showMessageDialog(null, "Bạn đã thêm dữ liệu thành công !");
                return true;
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error: " + ex.getMessage());
        }
        return false;
    }

    public boolean addCTMT(CTMuonTra ctmt) {               //Thêm sách vào database
        String sql = "INSERT INTO `quanlythuvien`.`ctmuontra` "
                + "(`MaMuon_LDP`, `MaSach_LDP`, `NgayTra_LDP`, "
                + "`TienCoc_LDP`, `TienPhat_LDP`, `GhiChu_LDP`) "
                + "VALUES (?,?,?,?,?,?);";
        try {
            ps = conn.prepareStatement(sql);
            ps.setString(1, ctmt.getMaMuon());
            ps.setString(2, ctmt.getMaSach());
            if (!ctmt.getNgayTra().equals("")) {
                ps.setString(3, ctmt.getNgayTra());
            } else {
                ps.setString(3, "0000-00-00");
            }
            ps.setInt(4, ctmt.getTienCoc());
            ps.setInt(5, ctmt.getTienPhat());
            ps.setString(6, ctmt.getGhiChu());
            int kt = ps.executeUpdate();
            if (kt != 0) {
                JOptionPane.showMessageDialog(null, "Bạn đã thêm dữ liệu thành công !");
                return true;
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error: " + ex.getMessage());
        }
        return false;
    }

    public void updateSoLuongSachCon(String maSach, String c) {
        String sql = "UPDATE `quanlythuvien`.`sach` "
                + "SET `SoLuongCon_LDP` = `SoLuongCon_LDP` " + c + " WHERE (`MaSach_LDP` = ?);";
        try {
            ps = conn.prepareStatement(sql);
            ps.setString(1, cbBoxMaSach.getSelectedItem().toString());
            ps.executeUpdate();
        } catch (SQLException ex) {
            Logger.getLogger(QuanLyMuonTra.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void updateTongSoLuongSach(String maSach, String c) {
        String sql = "UPDATE `quanlythuvien`.`sach` "
                + "SET `TongSoLuong_LDP` = `TongSoLuong_LDP` " + c + " WHERE (`MaSach_LDP` = ?);";
        try {
            ps = conn.prepareStatement(sql);
            ps.setString(1, cbBoxMaSach.getSelectedItem().toString());
            ps.executeUpdate();
        } catch (SQLException ex) {
            Logger.getLogger(QuanLyMuonTra.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public boolean updateMT() {
        String sql = "UPDATE `quanlythuvien`.`muontra` "
                + "SET `MaMuon_LDP` = ?, `MaDG_LDP` = ?, "
                + "`MaNV_LDP` = ?, `NgayMuon_LDP` = ?, "
                + "`HanTra_LDP` = ? "
                + "WHERE (`MaMuon_LDP` = ?);";
        try {
            ps = conn.prepareStatement(sql);
            ps.setString(1, maMuon.getText());
            ps.setString(2, cbBoxMaDG.getSelectedItem().toString());
            ps.setString(3, cbBoxMaNV.getSelectedItem().toString());
            ps.setString(4, ngayMuon.getText());
            ps.setString(5, hanTra.getText());
            ps.setString(6, (Table1.getValueAt(Table1.getSelectedRow(), 0)).toString());

            int kt = ps.executeUpdate();
            if (kt != 0) {
                JOptionPane.showMessageDialog(null, "Bạn đã cập nhật dữ liệu thành công");
                //  Xóa dòng tại vị trí rowID lấy từ action mouse click
                model1.removeRow(rowID1);
                //  Thêm bản ghi vào bảng tại vị trí rowID lấy từ action mouse click
                model1.insertRow(rowID1, new Object[]{
                    maMuon.getText(), cbBoxMaDG.getSelectedItem().toString(),
                    cbBoxMaNV.getSelectedItem().toString(), ngayMuon.getText(), hanTra.getText()
                });
                clearData1();
                return true;
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error: " + ex.getMessage());
        }
        return false;
    }

    public boolean updateCTMT() {
        int tienPhat;
        CountDate cd = new CountDate();
        String sql = "UPDATE `quanlythuvien`.`ctmuontra` "
                + "SET `MaMuon_LDP` = ?, `MaSach_LDP` = ?, `NgayTra_LDP` = ?, "
                + "`TienCoc_LDP` = ?, `TienPhat_LDP` = ?, `GhiChu_LDP` = ? "
                + "WHERE (`MaMuon_LDP` = ?) and (`MaSach_LDP` = ?);";
        try {
            ps = conn.prepareStatement(sql);
            ps.setString(1, lbMaMuon.getText());
            ps.setString(2, cbBoxMaSach.getSelectedItem().toString());
            String nTra = Table2.getValueAt(rowID2, 3).toString();
            ps.setString(3, ngayTra.getText());
            ps.setInt(4, Integer.parseInt(tienCoc.getText()));
            tienPhat = (hsPhat * cd.soNgay(Table1.getValueAt(rowID1, 4).toString(), ngayTra.getText()));
            ps.setInt(5, tienPhat);
            ps.setString(6, ghiChu.getText());
            ps.setString(7, Table2.getValueAt(rowID2, 0).toString());
            ps.setString(8, Table2.getValueAt(rowID2, 1).toString());

            int kt = ps.executeUpdate();
            if (kt != 0) {
                JOptionPane.showMessageDialog(null, "Bạn đã cập nhật dữ liệu thành công");
                if (nTra.equals("0000-00-00") && !ngayTra.getText().equals("0000-00-00")) {
                    updateSoLuongSachCon(cbBoxMaSach.getSelectedItem().toString(), "+ 1");
                }
                //  Xóa dòng tại vị trí rowID lấy từ action mouse click
                model2.removeRow(rowID2);
                //  Thêm bản ghi vào bảng tại vị trí rowID lấy từ action mouse click
                model2.insertRow(rowID2, new Object[]{
                    lbMaMuon.getText(), cbBoxMaSach.getSelectedItem().toString(),
                    getTenSach(cbBoxMaSach.getSelectedItem().toString()), ngayTra.getText(), tienCoc.getText(),
                    tienPhat, ghiChu.getText()
                });
                return true;
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error: " + ex.getMessage());
        }

        return false;
    }

    public boolean removeMT() {                       //Xóa Sách khỏi database
        String sql = "DELETE FROM MUONTRA WHERE MaMuon_LDP = ?;";
        try {
            ps = conn.prepareStatement(sql);
            ps.setString(1, maMuon.getText());
            int kt = ps.executeUpdate();
            if (kt != 0) {
                JOptionPane.showMessageDialog(null, "Bạn đã xóa dữ liệu thành công !");
                //  Xóa dòng tại vị trí rowID với rowID lấy từ action mouse click
                return true;
            }
        } catch (SQLException ex) {
//            Logger.getLogger(QuanLySach.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Error => " + ex.getMessage());
        }
        return false;
    }

    public boolean removeCTMT() {                       //Xóa Sách khỏi database
        String sql = "DELETE FROM `quanlythuvien`.`ctmuontra` "
                + "WHERE (`MaMuon_LDP` = ?) and (`MaSach_LDP` = ?);";
        try {
            ps = conn.prepareStatement(sql);
            ps.setString(1, lbMaMuon.getText());
            ps.setString(2, Table2.getValueAt(rowID2, 1).toString());
            int kt = ps.executeUpdate();
            if (kt != 0) {
                JOptionPane.showMessageDialog(null, "Bạn đã xóa dữ liệu thành công !");
                //   Nếu xóa bản ghi mà chưa có ngày trả thì Tổng số lượng sách bị giảm 1
                if (Table2.getValueAt(rowID2, 3).toString().equals("0000-00-00")) {
                    updateTongSoLuongSach(cbBoxMaSach.getSelectedItem().toString(), "- 1");
                }
                return true;
            }
        } catch (SQLException ex) {
//            Logger.getLogger(QuanLySach.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Error => " + ex.getMessage());
        }
        return false;
    }

    /*---------*--------------------Chức Năng Tìm Kiếm ---------------------------*-----------*/
    //Tìm kiếm mượn trả theo mã mượn
    public void tKTheoMaMuon(String maMuon) {
        MuonTra mt = new MuonTra();
        DefaultTableModel model1 = (DefaultTableModel) Table1.getModel();
        String sql = "SELECT * FROM quanlythuvien.MuonTra "
                + "WHERE MaMuon_LDP = '" + maMuon + "';";
        try {
            ps = conn.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                mt.setMaMuon(rs.getString("MaMuon_LDP"));
                mt.setMaDG(rs.getString("MaDG_LDP"));
                mt.setMaNV(rs.getString("MaNV_LDP"));
                mt.setNgayMuon(rs.getString("NgayMuon_LDP"));
                mt.setHanTra(rs.getString("HanTra_LDP"));
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error: " + ex.getMessage());
        }
        showTable1(mt);
    }

    //Tìm kiếm mượn trả theo mã độc giả 
    public void tKTheoMaDG() {
        String sql = "SELECT MaMuon_LDP FROM quanlythuvien.MuonTra "
                + "WHERE MaDG_LDP = '" + timKiem.getText() + "';";

        try {
            ps = conn.prepareStatement(sql);

            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String maMuon = rs.getString("MaMuon_LDP");
                tKTheoMaMuon(maMuon);
                showTKCTMT(maMuon);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error: " + ex.getMessage());
        }
    }

    // Tìm Kiếm  mượn tra theo mã nhân viên
    public void tKTheoMaNV() {
        String sql = "SELECT MaMuon_LDP FROM quanlythuvien.MuonTra "
                + "WHERE MaNV_LDP = ?;";
        try {
            ps = conn.prepareStatement(sql);
            ps.setString(1, timKiem.getText());

            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String maMuon = rs.getString(1);
                tKTheoMaMuon(maMuon);
                showTKCTMT(maMuon);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error: " + ex.getMessage());
        }
    }

    //  Tìm mượn trả theo mã sách
    public void tKTheoMaSach() {
        DefaultTableModel model2 = (DefaultTableModel) Table2.getModel();
        Set<String> maMuon = new HashSet<>();
        String m = null;
        String sql = "SELECT * FROM quanlythuvien.CTMuonTra "
                + "WHERE MaSach_LDP = ?;";

        try {
            ps = conn.prepareStatement(sql);
            ps.setString(1, timKiem.getText());
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                maMuon.add(rs.getString(1));
                model2.addRow(new Object[]{
                    rs.getString(1), rs.getString(2), getTenSach(rs.getString(2)),
                    rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6)
                });
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error: " + ex.getMessage());
        }

        for (String mm : maMuon) {
            tKTheoMaMuon(mm);
        }
    }

    public void tKTheoNgayTra() {
        DefaultTableModel model2 = (DefaultTableModel) Table2.getModel();
        Set<String> maMuon = new HashSet<>();
        String m = null;
        String sql = "SELECT * FROM quanlythuvien.CTMuonTra "
                + "WHERE NgayTra_LDP = ?;";

        try {
            ps = conn.prepareStatement(sql);
            ps.setString(1, timKiem.getText());

            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                maMuon.add(rs.getString(1));
                model2.addRow(new Object[]{
                    rs.getString(1), rs.getString(2), getTenSach(rs.getString(2)),
                    rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6)
                });
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error: " + ex.getMessage());
        }

        for (String mm : maMuon) {
            tKTheoMaMuon(mm);
        }
    }

    /*------------------------------------------ Thống Kê  --------------------------------------------------*/
    public ArrayList<String> listTime() {
        ArrayList<String> time = new ArrayList<>();
        Set<String> listTime = new HashSet<>();
        String sql = "select A.NgayMuon_LDP , B.NgayTra_LDP\n"
                + "from (quanlythuvien.muontra A left join quanlythuvien.ctmuontra B on A.MaMuon_LDP = B.MaMuon_LDP);";
        String strTime = this.time.getText();
        int length = this.time.getText().length();
        try {
            ps = conn.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String s1 = rs.getString(1);
                String s2 = rs.getString(2);
                if (s1 != null && !s1.equals("0000-00-00") && s1.indexOf(strTime) == 0) {
                    if (strTime.equals("")) {
                        s1 = s1.substring(0, 4);
                    } else if (length == 4) {
                        s1 = s1.substring(0, 7);
                    }
                    listTime.add(s1);
                }
                if (s2 != null && !s2.equals("0000-00-00") && s2.indexOf(strTime) == 0) {
                    if (strTime.equals("")) {
                        s2 = s2.substring(0, 4);
                    } else if (length == 4) {
                        s2 = s2.substring(0, 7);
                    }
                    listTime.add(s2);
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(QuanLyMuonTra.class.getName()).log(Level.SEVERE, null, ex);
        }

        time.addAll(listTime);
        Collections.sort(time);
        return time;
    }

    /*----------------------------------- Thống kê cho tất cả --------------------------------*/
    //  Hàm đếm số tiền phạt có trong ngày or tháng or năm
    public int sumTienPhatTQ(String time) {
        int sumTP = 0;
        String sql = "select sum(tienPhat_LDP)\n"
                + "from (quanlythuvien.muontra A left join quanlythuvien.ctmuontra B on A.MaMuon_LDP = B.MaMuon_LDP) \n"
                + "where NgayTra_LDP like \"" + time + "%\";";
        try {
            ps = conn.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                sumTP = rs.getInt(1);
            }
        } catch (SQLException ex) {
            Logger.getLogger(QuanLyMuonTra.class.getName()).log(Level.SEVERE, null, ex);
        }
        return sumTP;
    }

    /*----------------- Thống kê cho nhân viên ----------------------------------------*/
    // List ma nhan vien trong time 
    public ArrayList<String> listMaNV(String strTime) {
        ArrayList<String> listMaNV = new ArrayList<>();
        String sql = "select distinct MaNV_LDP\n"
                + "from (quanlythuvien.muontra A left join quanlythuvien.ctmuontra B on A.MaMuon_LDP = B.MaMuon_LDP) \n"
                + "where NgayMuon_LDP like '" + strTime + "%'  or NgayTra_LDP like '" + strTime + "%'; ";
        try {
            ps = conn.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                listMaNV.add(rs.getString(1));
            }
        } catch (SQLException ex) {
            Logger.getLogger(QuanLyMuonTra.class.getName()).log(Level.SEVERE, null, ex);
        }

        return listMaNV;
    }

    // Hàm đếm số tiền phạt cho nhân viên
    public int sumTienPhatNV(String maNV, String strTime) {
        int sumTP = 0;
        String sql = "select  sum(TienPhat_LDP)\n"
                + "from (quanlythuvien.muontra A left join quanlythuvien.ctmuontra B on A.MaMuon_LDP = B.MaMuon_LDP) \n"
                + "where MaNV_LDP = '" + maNV + "' and NgayTra_LDP like '" + strTime + "%';";
        try {
            ps = conn.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                sumTP = rs.getInt(1);
            }
        } catch (SQLException ex) {
            Logger.getLogger(QuanLyMuonTra.class.getName()).log(Level.SEVERE, null, ex);
        }
        return sumTP;
    }

    /*----------------------------------- Thống kê cho độc giả -----------------------*/
    public ArrayList<String> listMaDG(String strTime) {
        ArrayList<String> listMaDG = new ArrayList<>();
        String sql = "select distinct MaDG_LDP\n"
                + "from (quanlythuvien.muontra A left join quanlythuvien.ctmuontra B on A.MaMuon_LDP = B.MaMuon_LDP) \n"
                + "where NgayMuon_LDP like '" + strTime + "%'  or NgayTra_LDP like '" + strTime + "%'; ";
        try {
            ps = conn.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                listMaDG.add(rs.getString(1));
            }
        } catch (SQLException ex) {
            Logger.getLogger(QuanLyMuonTra.class.getName()).log(Level.SEVERE, null, ex);
        }

        return listMaDG;
    }

    public int sumTienPhatDG(String maDG, String strTime) {
        int sumTP = 0;
        String sql = "select  sum(TienPhat_LDP)\n"
                + "from (quanlythuvien.muontra A left join quanlythuvien.ctmuontra B on A.MaMuon_LDP = B.MaMuon_LDP) \n"
                + "where MaDG_LDP = '" + maDG + "' and NgayTra_LDP like '" + strTime + "%';";
        try {
            ps = conn.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                sumTP = rs.getInt(1);
            }
        } catch (SQLException ex) {
            Logger.getLogger(QuanLyMuonTra.class.getName()).log(Level.SEVERE, null, ex);
        }
        return sumTP;
    }

    /*------------------------------------------- Xuất File --------------------------------------------------*/
    // Xuất phiếu mượn trả
    public void xuatPhieu(XWPFDocument doc, String fileName) {
        try {
            InputStream file = new FileInputStream(fileName);
            Iterator bodyElementIterator = doc.getBodyElementsIterator();

            for (XWPFParagraph p : doc.getParagraphs()) {
                List<XWPFRun> runs = p.getRuns();
                if (runs != null) {
                    for (XWPFRun r : runs) {
                        r.setFontSize(12);
                        r.setFontFamily("Times New Roman");
                        String text = r.getText(0);
                        if (text != null) {
                            if (text.contains("MTxxx")) {
                                text = text.replace("MTxxx",
                                        Table1.getValueAt(0, 0).toString());
                                r.addBreak();
                                r.setText(text, 0);
                            }
                            if (text.contains("DGxxx")) {
                                text = text.replace("DGxxx", "                                Mã độc giả: "
                                        + Table1.getValueAt(0, 1).toString()
                                        + "                                         "
                                        + "Tên độc giả: "
                                        + getTenDG(Table1.getValueAt(0, 1).toString()));
                                r.addBreak();
                                r.setText(text, 0);
                            }
                            if (text.contains("NVxxx")) {
                                text = text.replace("NVxxx", "                                Mã nhân viên: "
                                        + Table1.getValueAt(0, 2).toString() + "                                     "
                                        + "Tên nhân viên: "
                                        + getTenNV(Table1.getValueAt(0, 2).toString()));
                                r.addBreak();
                                r.setText(text, 0);

                            }
                            if (text.contains("yyyyMMDD")) {
                                text = text.replace("yyyyMMDD", "                                Ngày mượn: "
                                        + Table1.getValueAt(0, 3).toString() + "                                 "
                                        + "Ngày hẹn trả: "
                                        + Table1.getValueAt(0, 4).toString());
                                r.addBreak();
                                r.setText(text, 0);
                            }
                            if (text.contains("tiencpxxx")) {
                                int tienCoc = 0;
                                int tienPhat = 0;
                                for (int i = 0; i < Table2.getRowCount(); i++) {
                                    tienCoc += Integer.parseInt(Table2.getValueAt(i, 4).toString());
                                    tienPhat += Integer.parseInt(Table2.getValueAt(i, 5).toString());
                                }
                                text = text.replace("tiencpxxx", "                                Tổng tiền cọc: "
                                        + tienCoc
                                        + "                                       Tổng tiền phạt: "
                                        + tienPhat);
                                r.addBreak();
                                r.setText(text, 0);
                                break;
                            }
                            if (text.contains("ngayxxx")) {
                                SimpleDateFormat day = new SimpleDateFormat("dd");
                                SimpleDateFormat month = new SimpleDateFormat("MM");
                                SimpleDateFormat year = new SimpleDateFormat("yyyy");
                                Date date = new Date();
                                String ngay = day.format(date);
                                String thang = month.format(date);
                                String nam = year.format(date);
                                text = text.replace("ngayxxx", "Ngày  " + ngay + "  tháng  " + thang + "  năm  " + nam);
                                r.setText(text, 0);
                                break;
                            }
                        }
                    }
                }
            }

            while (bodyElementIterator.hasNext()) {
                IBodyElement element = (IBodyElement) bodyElementIterator.next();
                if ("TABLE".equalsIgnoreCase(element.getElementType().name())) {
                    //Danh sách tất cả Table trong file word
                    List<XWPFTable> tableList = element.getBody().getTables();
                    for (XWPFTable table : tableList) {
                        //Căn bảng ở giữa file
                        table.setTableAlignment(TableRowAlign.CENTER);
                        //  Xóa các dòng thừa trước khi thêm mới
                        while (table.getRow(1) != null) {
                            table.removeRow(1);
                        }
                        //Thêm các dòng từ jTable vào table trong word
                        for (int i = 1; i <= Table2.getRowCount(); i++) {
                            XWPFTableRow newRow = table.createRow();
                            newRow.getCell(0).setText(i + "");
                            newRow.getCell(1).setText(Table2.getValueAt(i - 1, 0).toString());
                            newRow.getCell(2).setText(Table2.getValueAt(i - 1, 1).toString());
                            newRow.getCell(3).setText(Table2.getValueAt(i - 1, 2).toString());
                            newRow.getCell(4).setText(Table2.getValueAt(i - 1, 3).toString());
                            newRow.getCell(5).setText(Table2.getValueAt(i - 1, 5).toString());
                            newRow.getCell(6).setText(Table2.getValueAt(i - 1, 6).toString());
                        }
                    }
                }
            }

            OutputStream fOut = new FileOutputStream("Phiếu mượn trả.docx");
            doc.write(fOut);
            fOut.close();
        } catch (IOException ex) {
            JOptionPane.showConfirmDialog(null, ex.getMessage());
            Logger.getLogger(QuanLyMuonTra.class.getName()).log(Level.SEVERE, null, ex);
        }

        String fileOut = System.getProperty("user.home")
                + "\\Documents\\NetBeansProjects\\Quanlythuvien\\"
                + "Phiếu mượn trả.docx";
        try {
            File myFile = new File(fileOut);
            Desktop.getDesktop().open(myFile);
        } catch (IOException ex) {
            JOptionPane.showConfirmDialog(null, ex.getMessage());
            ex.printStackTrace();
        }
    }

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        removeAllRow3();
        TKMuonTra.setText("Thống Kê Mượn Trả Cho Độc Giả");
        DefaultTableModel modelTK = (DefaultTableModel) Table3.getModel();
        modelTK.setColumnIdentifiers(new Object[]{
            "   STT", "    Thời gian", "     Mã Độc Giả", "    Tên Độc Giả", 
            "   Số Lượng Phiếu Mượn", "      Số Tiền Cọc", "     Số Tiền Phạt"
        });
        int i = 0;
        String sql = null;
        for (String time : listTime()) {
            ArrayList<String> listMaDG = listMaDG(time);
            for (String maDG : listMaDG) {
                sql = "select count(distinct A.MaMuon_LDP) , sum(TienCoc_LDP)\n"
                        + "from (quanlythuvien.muontra A left join quanlythuvien.ctmuontra B on A.MaMuon_LDP = B.MaMuon_LDP) \n"
                        + "where MaDG_LDP = '" + maDG + "' and NgayMuon_LDP like '" + time + "%';";
                try {
                    ps = conn.prepareStatement(sql);
                    ResultSet rs = ps.executeQuery();
                    while (rs.next()) {
                        int tp = sumTienPhatDG(maDG, time);
                        if (!rs.getString(1).equals("0") || tp != 0) {
                            modelTK.addRow(new Object[]{
                                ++i, time, maDG, getTenDG(maDG), rs.getInt(1), rs.getInt(2), tp
                            });
                        }
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(QuanLyMuonTra.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        removeAllRow3();
        int i = 0;
        TKMuonTra.setText("Thống Kê Mượn Trả Cho Nhân Viên");
        DefaultTableModel modelTK = (DefaultTableModel) Table3.getModel();
        modelTK.setColumnIdentifiers(new Object[]{
            "   STT", "    Thời gian", "      Mã Nhân Viên", "    Tên Nhân Viên",
            "   Số Lượng Phiếu Cho Mượn", "      Số Tiền Cọc", "     Số Tiền Phạt"
        });
        String sql = null;
        for (String time : listTime()) {
            ArrayList<String> listMaNV = listMaNV(time);
            for (String maNV : listMaNV) {
                sql = "select count(distinct A.MaMuon_LDP) , sum(TienCoc_LDP)\n"
                        + "from (quanlythuvien.muontra A left join quanlythuvien.ctmuontra B on A.MaMuon_LDP = B.MaMuon_LDP) \n"
                        + "where MaNV_LDP = '" + maNV + "' and NgayMuon_LDP like '" + time + "%';";
                try {
                    ps = conn.prepareStatement(sql);
                    ResultSet rs = ps.executeQuery();
                    while (rs.next()) {
                        int tp = sumTienPhatNV(maNV, time);
                        if (!rs.getString(1).equals("0") || tp != 0) {
                            modelTK.addRow(new Object[]{
                                ++i, time, maNV, getTenNV(maNV), rs.getInt(1), rs.getInt(2), tp
                            });
                        }
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(QuanLyMuonTra.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        removeAllRow3();
        int i = 0;
        TKMuonTra.setText("Thống Kê Mượn Trả Tổng Quát");
        DefaultTableModel modelTK = (DefaultTableModel) Table3.getModel();
        modelTK.setColumnIdentifiers(new Object[]{
            "   STT", "   Thời gian", "   Số Lượng Phiếu Mượn", "      Số Tiền Cọc", "     Số Tiền Phạt"
        });
        for (String tg : listTime()) {
            try {
                String sql = "select  count(distinct A.MaMuon_LDP) , sum(tienCoc_LDP) \n"
                        + "from (quanlythuvien.muontra A left join quanlythuvien.ctmuontra B on A.MaMuon_LDP = B.MaMuon_LDP) \n"
                        + "where NgayMuon_LDP like '" + tg + "%';";
                ps = conn.prepareStatement(sql);
                ResultSet rs = ps.executeQuery();
                while (rs.next()) {
                    modelTK.addRow(new Object[]{
                        ++i, tg, rs.getInt(1), rs.getInt(2), sumTienPhatTQ(tg)
                    });
                }
            } catch (SQLException ex) {
                Logger.getLogger(QuanLyMuonTra.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
//        centerAlignment(Table3);    Hàm setText in Cell of JTable Center
    }//GEN-LAST:event_jButton9ActionPerformed

    private void hanTraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hanTraActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_hanTraActionPerformed

    private void ngayMuonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ngayMuonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ngayMuonActionPerformed

    public void findAndReplaceText(XWPFDocument doc, String paragraph, String champs) throws IOException {
        for (XWPFParagraph p : doc.getParagraphs()) {
            java.util.List<XWPFRun> runs = p.getRuns();
            if (runs != null) {
                for (XWPFRun r : runs) {
                    String text = r.getText(0);
                    if (text != null && text.contains("P01")) {
                        text = text.replace(paragraph, champs);
                        System.out.println("text replaced");
                        r.setText(text, 0);
                        //add new line
                        r.addBreak();
                        //new "P01" added
                        r.setText(paragraph);
                    }
                }
            }
        }
    }
    private void xuatCTMTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_xuatCTMTActionPerformed
        String fileName = null;
        String f0 = System.getProperty("user.home");
        String f1 = "\\Documents\\NetBeansProjects\\Quanlythuvien\\Quản Lý Mượn Trả\\";
        String f2 = null;
        String sql = null;
        switch (cbBoxTimKiem.getSelectedIndex()) {
            case 0:
                f2 = "Phiếu mượn trả (biểu mẫu).docx";
                break;
            case 1:
                f2 = "Tìm kiếm theo mã độc giả.docx";
                sql = "select A.MaMuon_LDP , MaDG_LDP , MaNV_LDP , MaSach_LDP ,NgayMuon_LDP , HanTra_LDP ,  NgayTra_LDP , TienCoc_LDP , TienPhat_LDP , GhiChu_LDP\n"
                        + "from quanlythuvien.muontra A left join quanlythuvien.ctmuontra B \n"
                        + "on A.MaMuon_LDP = B.MaMuon_LDP\n"
                        + "where A.MaDG_LDP = \"" + timKiem.getText() + "\";";
                break;
            case 2:
                f2 = "Tìm kiếm theo mã sách.docx";
                sql = "select A.MaMuon_LDP , MaDG_LDP , MaNV_LDP , MaSach_LDP ,NgayMuon_LDP , HanTra_LDP ,  NgayTra_LDP , TienCoc_LDP , TienPhat_LDP , GhiChu_LDP\n"
                        + "from quanlythuvien.muontra A left join quanlythuvien.ctmuontra B \n"
                        + "on A.MaMuon_LDP = B.MaMuon_LDP\n"
                        + "where B.MaSach_LDP = \"" + timKiem.getText() + "\";";
                break;
            case 3:
                f2 = "Tìm kiếm theo mã nhân viên.docx";
                sql = "select A.MaMuon_LDP , MaDG_LDP , MaNV_LDP , MaSach_LDP ,NgayMuon_LDP , HanTra_LDP ,  NgayTra_LDP , TienCoc_LDP , TienPhat_LDP , GhiChu_LDP\n"
                        + "from quanlythuvien.muontra A left join quanlythuvien.ctmuontra B \n"
                        + "on A.MaMuon_LDP = B.MaMuon_LDP\n"
                        + "where A.MaNV_LDP = \"" + timKiem.getText() + "\";";
                break;
            case 4:
                f2 = "Tìm kiếm theo ngày trả.docx";
                sql = "select A.MaMuon_LDP , MaDG_LDP , MaNV_LDP , MaSach_LDP ,NgayMuon_LDP , HanTra_LDP ,  NgayTra_LDP , TienCoc_LDP , TienPhat_LDP , GhiChu_LDP\n"
                        + "from quanlythuvien.muontra A left join quanlythuvien.ctmuontra B \n"
                        + "on A.MaMuon_LDP = B.MaMuon_LDP\n"
                        + "where B.NgayTra_LDP = \"" + timKiem.getText() + "\";";
                break;
        }
        fileName = f0 + f1 + f2;
        System.out.println(fileName);
        try {
            InputStream file = new FileInputStream(fileName);
            XWPFDocument docx = new XWPFDocument(OPCPackage.open(file));
            Iterator bodyElementIterator = docx.getBodyElementsIterator();
            //Nếu là xuất phiếu mượn thì sửa form
            if (f2.equals("Phiếu mượn trả (biểu mẫu).docx")) {
                xuatPhieu(docx, fileName);
            } else {
                for (XWPFParagraph p : docx.getParagraphs()) {
                    List<XWPFRun> runs = p.getRuns();
                    if (runs != null) {
                        for (XWPFRun r : runs) {
                            r.setFontSize(12);
                            r.setFontFamily("Times New Roman");
                            String text = r.getText(0);
                            if (text != null && text.contains("ngayxxx")) {
                                SimpleDateFormat day = new SimpleDateFormat("dd");
                                SimpleDateFormat month = new SimpleDateFormat("MM");
                                SimpleDateFormat year = new SimpleDateFormat("yyyy");
                                Date date = new Date();
                                String ngay = day.format(date);
                                String thang = month.format(date);
                                String nam = year.format(date);
                                text = text.replace("ngayxxx", "Ngày  " + ngay + "  Tháng  " + thang + "  Năm  " + nam);
                                r.setText(text, 0);
                                break;
                            }
                        }
                    }
                }
                while (bodyElementIterator.hasNext()) {
                    IBodyElement element = (IBodyElement) bodyElementIterator.next();
                    if ("TABLE".equalsIgnoreCase(element.getElementType().name())) {
                        //Danh sách tất cả Table trong file word
                        List<XWPFTable> tableList = element.getBody().getTables();
                        for (XWPFTable table : tableList) {
                            //Căn bảng ở giữa file
                            table.setTableAlignment(TableRowAlign.CENTER);
                            //  Xóa các dòng thừa trước khi thêm mới
                            while (table.getRow(1) != null) {
                                table.removeRow(1);
                            }
                            int i = 0;
                            //Thêm các dòng từ jTable vào table trong word
                            try {
                                ps = conn.prepareStatement(sql);
                                ResultSet rs = ps.executeQuery();
                                while (rs.next()) {
                                    XWPFTableRow newRow = table.createRow();
                                    newRow.getCell(0).setText(++i + "");
                                    for (int j = 1; j < 11; j++) {
                                        newRow.getCell(j).setText(rs.getString(j));
                                    }
                                }
                            } catch (SQLException ex) {
                                Logger.getLogger(QuanLyMuonTra.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    }
                }
                OutputStream fOut = new FileOutputStream(f2);
                docx.write(fOut);
                fOut.close();
                //Mở file
                try {
                    File myFile = new File(f0 + "\\Documents\\NetBeansProjects\\Quanlythuvien\\" + f2);
                    Desktop.getDesktop().open(myFile);
                } catch (IOException ex) {
                    // no application registered for PDFs
                    JOptionPane.showConfirmDialog(null, ex.getMessage());
                    ex.printStackTrace();
                }
            }
        } catch (IOException | InvalidFormatException ex) {
            JOptionPane.showConfirmDialog(null, ex.getMessage());
            Logger.getLogger(QuanLyMuonTra.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_xuatCTMTActionPerformed

    private void cbBoxTimKiemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbBoxTimKiemActionPerformed
        removeAllRow1();
        removeAllRow2();
        if (timKiem.getText().equals("")) {
            return;
        }
        //Tìm kiếm xong mới được xuất file
        xuatCTMT.setEnabled(true);
        Object obj = evt.getSource();
        if (obj == cbBoxTimKiem) {
            int index = cbBoxTimKiem.getSelectedIndex();
            switch (index) {
                case 0:
                    tKTheoMaMuon(timKiem.getText());
                    showTable2(getListCTMT2(timKiem.getText()));
                    break;
                case 1:
                    tKTheoMaDG();
                    break;
                case 2:
                    tKTheoMaSach();
                    break;
                case 3:
                    tKTheoMaNV();
                    break;
                case 4:
                    tKTheoNgayTra();
                    break;
            }
        }
    }//GEN-LAST:event_cbBoxTimKiemActionPerformed

    private void SuaMTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SuaMTActionPerformed
        int choose = JOptionPane.showConfirmDialog(null, "Bạn có muốn thay đổi dữ liệu không ?",
                "Quản Lý Mượn Trả _ Sửa", JOptionPane.YES_NO_OPTION);
        if (choose == 0) {
            boolean flag = updateMT();
            if (flag) {
                clearData1();
            }
        }
    }//GEN-LAST:event_SuaMTActionPerformed

    private void SuaCTMTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SuaCTMTActionPerformed
        int choose = JOptionPane.showConfirmDialog(null, "Bạn có muốn thay đổi dữ liệu không ?",
                "Quản Lý Chi Tiết Mượn Trả _ Sửa", JOptionPane.YES_NO_OPTION);
        if (choose == 0) {
            boolean flag = updateCTMT();
            if (flag) {
                clearData2();
            }
        }
    }//GEN-LAST:event_SuaCTMTActionPerformed

    private void timKiemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timKiemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_timKiemActionPerformed

    private void ngayTraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ngayTraActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ngayTraActionPerformed

    private void ghiChuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ghiChuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ghiChuActionPerformed

    private void tienCocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tienCocActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tienCocActionPerformed

    private void XoaMTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_XoaMTActionPerformed
        int choose = JOptionPane.showConfirmDialog(null, "Bạn có muốn thay xóa sách không ?",
                "Quản Lý Mượn Trả _ Xóa", JOptionPane.YES_NO_OPTION);
        if (choose == 0) {
            boolean flag = removeMT();
            if (flag) {
                clearData1();
                //  Xóa dòng tại vị trí rowID lấy từ action mouse click
                model1.removeRow(rowID1);
            }
        } else {
            clearData1();
        }

    }//GEN-LAST:event_XoaMTActionPerformed

    private void themMTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_themMTActionPerformed
        MuonTra s = new MuonTra();
        s.setMaMuon(maMuon.getText());
        s.setMaDG(cbBoxMaDG.getSelectedItem().toString());
        s.setMaNV(cbBoxMaNV.getSelectedItem().toString());
        s.setNgayMuon(ngayMuon.getText());
        s.setHanTra(hanTra.getText());
        boolean flag = addMT(s);                          //Nếu thêm sách thành công
        if (flag) {
            model1.addRow(new Object[]{
                s.getMaMuon(), s.getMaDG(), s.getMaNV(), s.getNgayMuon(), s.getHanTra()
            });
            clearData1();
        }
    }//GEN-LAST:event_themMTActionPerformed

    private void Table1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Table1MouseClicked
        rowID1 = Table1.getSelectedRow();
        maMuon.setText(Table1.getValueAt(rowID1, 0).toString());
        lbMaMuon.setText(Table1.getValueAt(rowID1, 0).toString());
        String dg = Table1.getValueAt(rowID1, 1).toString();
        cbBoxMaDG.setSelectedItem(dg);
        maDG.setText(getTenDG(dg));
        String nv = Table1.getValueAt(rowID1, 2).toString();
        cbBoxMaNV.setSelectedItem(nv);
        maNV.setText(getTenNV(nv));
        ngayMuon.setText(Table1.getValueAt(rowID1, 3).toString());
        hanTra.setText(Table1.getValueAt(rowID1, 4).toString());
        String maMuon = Table1.getValueAt(rowID1, 0).toString();
        showTable2(getListCTMT2(maMuon));
    }//GEN-LAST:event_Table1MouseClicked

    private void cbBoxMaSachActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbBoxMaSachActionPerformed
        String str = cbBoxMaSach.getSelectedItem().toString();
        lbTenSach.setText(getTenSach(str));
    }//GEN-LAST:event_cbBoxMaSachActionPerformed

    private void Table2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Table2MouseClicked
        rowID2 = Table2.getSelectedRow();
        lbMaMuon.setText(Table2.getValueAt(rowID2, 0).toString());
        cbBoxMaSach.setSelectedItem(Table2.getValueAt(rowID2, 1));
        ngayTra.setText(Table2.getValueAt(rowID2, 3).toString());
        tienCoc.setText(Table2.getValueAt(rowID2, 4).toString());
        ghiChu.setText(Table2.getValueAt(rowID2, 6).toString());
    }//GEN-LAST:event_Table2MouseClicked

    private void ThemCTMTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ThemCTMTActionPerformed
        CountDate cd = new CountDate();
        CTMuonTra ctmt = new CTMuonTra();
        ctmt.setMaMuon(maMuon.getText());
        ctmt.setMaSach(cbBoxMaSach.getSelectedItem().toString());
        int tienPhat = hsPhat * cd.soNgay(Table1.getValueAt(rowID1, 4).toString(), ngayTra.getText());
        String nTra = ngayTra.getText();
        if(nTra.equals("")) nTra = "0000-00-00";
        ctmt.setNgayTra(nTra);
        ctmt.setTienCoc(Integer.parseInt(tienCoc.getText()));
        ctmt.setTienPhat(tienPhat);
        ctmt.setGhiChu(ghiChu.getText());

        boolean flag = addCTMT(ctmt);                          //Nếu thêm sách thành công
        if (flag) {
            //  update lại số lượng sách còn lại trong kho
            if (!ngayTra.getText().equals("")) {
                updateSoLuongSachCon(ctmt.getMaSach(), "+ 1");
            } else {
                updateSoLuongSachCon(ctmt.getMaSach(), "- 1");
            }

            model2.addRow(new Object[]{
                ctmt.getMaMuon(), ctmt.getMaSach(), getTenSach(ctmt.getMaSach()), ctmt.getNgayTra(),
                ctmt.getTienCoc(), ctmt.getTienPhat(), ctmt.getGhiChu()
            });
            clearData2();
        }
    }//GEN-LAST:event_ThemCTMTActionPerformed

    private void cbBoxMaDGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbBoxMaDGActionPerformed
        String tenDG = cbBoxMaDG.getSelectedItem().toString();
        maDG.setText(getTenDG(tenDG));
    }//GEN-LAST:event_cbBoxMaDGActionPerformed

    private void cbBoxMaNVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbBoxMaNVActionPerformed
        String tenNV = cbBoxMaNV.getSelectedItem().toString();
        maNV.setText(getTenNV(tenNV));
    }//GEN-LAST:event_cbBoxMaNVActionPerformed

    private void XoaCTMTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_XoaCTMTActionPerformed
        int choose = JOptionPane.showConfirmDialog(null, "Bạn có muốn thay xóa sách không ?",
                "Quản Lý Chi Tiết Mượn Trả _ Xóa", JOptionPane.YES_NO_OPTION);
        if (choose == 0) {
            boolean flag = removeCTMT();
            if (flag) {
                clearData2();
                //  Xóa dòng tại vị trí rowID lấy từ action mouse click
                model2.removeRow(rowID2);
            }
        } else {
            clearData2();
        }
    }//GEN-LAST:event_XoaCTMTActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        removeAllRow1();
        removeAllRow2();
        clearData1();
        clearData2();
        lbTenSach.setText("");
        for (MuonTra mt : getListMT()) {
            showTable1(mt);
        }   // hiển thị mượn trả trong database
        showTable2(getListCTMT());
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        String f0 = System.getProperty("user.home");
        String f1 = "\\Documents\\NetBeansProjects\\Quanlythuvien\\Quản Lý Mượn Trả\\";
        String f2 = null;
        if (TKMuonTra.getText().equals("Thống Kê Mượn Trả Tổng Quát")) {
            f2 = "Thống kê tổng quát.docx";
        } else if (TKMuonTra.getText().equals("Thống Kê Mượn Trả Cho Nhân Viên")) {
            f2 = "Thống kê cho nhân viên.docx";
        } else if (TKMuonTra.getText().equals("Thống Kê Mượn Trả Cho Độc Giả")) {
            f2 = "Thống kê cho độc giả.docx";
        }
        String fileName = f0 + f1 + f2;

        try {
            InputStream file = new FileInputStream(fileName);
            XWPFDocument hdoc = new XWPFDocument(OPCPackage.open(file));
            Iterator bodyElementIterator = hdoc.getBodyElementsIterator();
            for (XWPFParagraph p : hdoc.getParagraphs()) {
                List<XWPFRun> runs = p.getRuns();
                if (runs != null) {
                    for (XWPFRun r : runs) {
                        r.setFontSize(12);
                        r.setFontFamily("Times New Roman");
                        String text = r.getText(0);
                        if (text != null && text.contains("ngayxxx")) {
                            SimpleDateFormat day = new SimpleDateFormat("dd");
                            SimpleDateFormat month = new SimpleDateFormat("MM");
                            SimpleDateFormat year = new SimpleDateFormat("yyyy");
                            Date date = new Date();
                            String ngay = day.format(date);
                            String thang = month.format(date);
                            String nam = year.format(date);
                            text = text.replace("ngayxxx", "Ngày  " + ngay + "  tháng  " + thang + "  năm  " + nam);
                            r.setText(text, 0);
                            break;
                        }
                    }
                }
            }
            while (bodyElementIterator.hasNext()) {
                IBodyElement element = (IBodyElement) bodyElementIterator.next();
                if ("TABLE".equalsIgnoreCase(element.getElementType().name())) {
                    //Danh sách tất cả Table trong file word
                    List<XWPFTable> tableList = element.getBody().getTables();
                    //Duyệt qua danh sách tất cả các table
                    for (XWPFTable table : tableList) {
                        //Căn bảng ở giữa file
                        table.setTableAlignment(TableRowAlign.CENTER);
                        //  Xóa các dòng thừa trước khi thêm mới
                        while (table.getRow(1) != null) {
                            table.removeRow(1);
                        }
                        //Thêm các dòng từ jTable vào table trong word
                        for (int i = 1; i <= Table3.getRowCount(); i++) {
                            XWPFTableRow newRow = table.createRow();
                            for (int j = 0; j < table.getRow(i).getTableCells().size(); j++) {
                                newRow.getCell(j).setText(Table3.getValueAt(i - 1, j).toString());
                            }
                        }
                    }
                }
            }
            OutputStream out = new FileOutputStream(f2);
            hdoc.write(out);
            out.close();
            //Mở file
            try {
                File myFile = new File(f0 + "\\Documents\\NetBeansProjects\\Quanlythuvien\\" + f2);
                Desktop.getDesktop().open(myFile);
            } catch (IOException ex) {
                // no application registered for PDFs
                JOptionPane.showConfirmDialog(null, ex.getMessage());
                ex.printStackTrace();
            }
        } catch (IOException | InvalidFormatException ex) {
            Logger.getLogger(QuanLyMuonTra.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton10ActionPerformed

    private void centerAlignment(JTable table) {
        DefaultTableCellRenderer centerAlignment = new DefaultTableCellRenderer();
        DefaultTableCellRenderer centerHeader = new DefaultTableCellHeaderRenderer();
        centerHeader.setHorizontalAlignment(SwingConstants.CENTER);
        centerAlignment.setHorizontalAlignment(SwingConstants.CENTER);
        for (int i = 0; i < table.getColumnCount(); i++) {
            table.getColumnModel().getColumn(i).setCellRenderer(centerAlignment);
            table.getTableHeader().getColumnModel().getColumn(i).setCellRenderer(centerHeader);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(QuanLyMuonTra.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(QuanLyMuonTra.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(QuanLyMuonTra.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(QuanLyMuonTra.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new QuanLyMuonTra().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton SuaCTMT;
    private javax.swing.JButton SuaMT;
    private javax.swing.JLabel TKMuonTra;
    private javax.swing.JTable Table1;
    private javax.swing.JTable Table2;
    private javax.swing.JTable Table3;
    private javax.swing.JButton ThemCTMT;
    private javax.swing.JButton XoaCTMT;
    private javax.swing.JButton XoaMT;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> cbBoxMaDG;
    private javax.swing.JComboBox<String> cbBoxMaNV;
    private javax.swing.JComboBox<String> cbBoxMaSach;
    private javax.swing.JComboBox<String> cbBoxTimKiem;
    private javax.swing.JTextField ghiChu;
    private javax.swing.JTextField hanTra;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JDesktopPane jDesktopPane2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JLayeredPane jLayeredPane2;
    private javax.swing.JLayeredPane jLayeredPane3;
    private javax.swing.JLayeredPane jLayeredPane4;
    private javax.swing.JLayeredPane jLayeredPane5;
    private javax.swing.JLayeredPane jLayeredPane7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lbMaMuon;
    private javax.swing.JLabel lbTenSach;
    private javax.swing.JLabel maDG;
    private javax.swing.JTextField maMuon;
    private javax.swing.JLabel maNV;
    private javax.swing.JTextField ngayMuon;
    private javax.swing.JTextField ngayTra;
    private javax.swing.JButton themMT;
    private javax.swing.JTextField tienCoc;
    private javax.swing.JTextField timKiem;
    private javax.swing.JTextField time;
    private javax.swing.JButton xuatCTMT;
    // End of variables declaration//GEN-END:variables
}
