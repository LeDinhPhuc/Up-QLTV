/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package quanlythuvien;

import java.awt.Desktop;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.apache.poi.openxml4j.opc.OPCPackage;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.poi.ss.usermodel.DateUtil;
import org.apache.poi.ss.util.NumberToTextConverter;
import org.apache.poi.xwpf.usermodel.IBodyElement;
import org.apache.poi.xwpf.usermodel.TableRowAlign;
import org.apache.poi.xwpf.usermodel.XWPFDocument;
import org.apache.poi.xwpf.usermodel.XWPFParagraph;
import org.apache.poi.xwpf.usermodel.XWPFRun;
import org.apache.poi.xwpf.usermodel.XWPFTable;
import org.apache.poi.xwpf.usermodel.XWPFTableRow;

/**
 *
 * @author Đình Phúc
 */
public class QuanLyDocGia extends javax.swing.JFrame {

    /**
     * Creates new form QuanLyDocGia
     */
    DefaultTableModel model;
    MyConnect myConnect = new MyConnect();
    Connection conn = myConnect.connect();
    PreparedStatement ps = null;
    int rowID = 0;
    boolean fileOut = true;

    public QuanLyDocGia() {
        initComponents();
        model = (DefaultTableModel) Table1.getModel();
        removeAllRow();
        showTable(getListDG());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jDesktopPane2 = new javax.swing.JDesktopPane();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        maDG = new javax.swing.JTextField();
        tenDG = new javax.swing.JTextField();
        ngaySinh = new javax.swing.JTextField();
        gioiTinh = new javax.swing.JTextField();
        diaChi = new javax.swing.JTextField();
        sDT = new javax.swing.JTextField();
        cmnd = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        Them = new javax.swing.JButton();
        Sua = new javax.swing.JButton();
        Xoa = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table1 = new javax.swing.JTable();
        comboTimKiem = new javax.swing.JComboBox<>();
        jButton10 = new javax.swing.JButton();
        timKiem = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        nhap = new javax.swing.JButton();
        AddToDB = new javax.swing.JButton();
        seeAll = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jDesktopPane1 = new javax.swing.JDesktopPane();
        TKDG = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        Table2 = new javax.swing.JTable();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setTitle("LÊ ĐÌNH PHÚC _ 20163184 _ Quản Lý Độc Giả");

        jTabbedPane1.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N

        jDesktopPane2.setBackground(new java.awt.Color(51, 51, 51));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Mã Độc Giả");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Tên Độc Giả");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Ngày Sinh");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Giới Tính");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("CMND");

        maDG.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N

        tenDG.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N

        ngaySinh.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N

        gioiTinh.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        gioiTinh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gioiTinhActionPerformed(evt);
            }
        });

        diaChi.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        diaChi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                diaChiActionPerformed(evt);
            }
        });

        sDT.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N

        cmnd.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Địa Chỉ");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("SĐT");

        Them.setBackground(new java.awt.Color(102, 255, 102));
        Them.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        Them.setIcon(new javax.swing.ImageIcon(getClass().getResource("/quanlythuvien/icon/ínert.png"))); // NOI18N
        Them.setText("Thêm");
        Them.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ThemActionPerformed(evt);
            }
        });

        Sua.setBackground(new java.awt.Color(255, 255, 51));
        Sua.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        Sua.setIcon(new javax.swing.ImageIcon(getClass().getResource("/quanlythuvien/icon/sửa.png"))); // NOI18N
        Sua.setText("Sửa");
        Sua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SuaActionPerformed(evt);
            }
        });

        Xoa.setBackground(new java.awt.Color(255, 0, 0));
        Xoa.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        Xoa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/quanlythuvien/icon/remove.png"))); // NOI18N
        Xoa.setText("Xóa");
        Xoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                XoaActionPerformed(evt);
            }
        });

        Table1.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        Table1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "         Mã Độc Giả", "         Tên Độc Giả", "        Ngày Sinh", "       Giới Tính", "        Địa Chỉ", "            SĐT", "           CMND"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        Table1.setRowHeight(28);
        Table1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Table1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(Table1);

        comboTimKiem.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        comboTimKiem.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tìm Kiếm Theo Mã Độc Giả", "Tìm Kiếm Theo Tên Độc Giả", "Tìm Kiếm Theo Địa Chỉ", "Tìm Kiếm Theo SĐT", "Tìm Kiếm Theo CMND" }));
        comboTimKiem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboTimKiemActionPerformed(evt);
            }
        });

        jButton10.setBackground(new java.awt.Color(13, 255, 0));
        jButton10.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jButton10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/quanlythuvien/icon/if_output-1_2916359.png"))); // NOI18N
        jButton10.setText("Xuất File");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        timKiem.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel8.setText("Tìm Kiếm: ");

        nhap.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        nhap.setIcon(new javax.swing.ImageIcon(getClass().getResource("/quanlythuvien/icon/if_import-download-save_2931171.png"))); // NOI18N
        nhap.setText("Nhập File");
        nhap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nhapActionPerformed(evt);
            }
        });

        AddToDB.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        AddToDB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/quanlythuvien/icon/add dâtbase.png"))); // NOI18N
        AddToDB.setText("Thêm Vào CSDL");
        AddToDB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddToDBActionPerformed(evt);
            }
        });

        seeAll.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        seeAll.setIcon(new javax.swing.ImageIcon(getClass().getResource("/quanlythuvien/icon/see.png"))); // NOI18N
        seeAll.setText("Hiện Thị Tất Cả");
        seeAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seeAllActionPerformed(evt);
            }
        });

        jDesktopPane2.setLayer(jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(jLabel2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(jLabel3, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(jLabel4, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(jLabel7, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(maDG, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(tenDG, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(ngaySinh, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(gioiTinh, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(diaChi, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(sDT, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(cmnd, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(jLabel5, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(jLabel6, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(Them, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(Sua, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(Xoa, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(jScrollPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(comboTimKiem, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(jButton10, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(timKiem, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(jLabel8, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(nhap, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(AddToDB, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(seeAll, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jDesktopPane2Layout = new javax.swing.GroupLayout(jDesktopPane2);
        jDesktopPane2.setLayout(jDesktopPane2Layout);
        jDesktopPane2Layout.setHorizontalGroup(
            jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopPane2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jDesktopPane2Layout.createSequentialGroup()
                            .addGroup(jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addComponent(Them))
                            .addGap(39, 39, 39)
                            .addGroup(jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(sDT, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(cmnd, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(diaChi, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(gioiTinh, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(ngaySinh, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(tenDG, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(maDG, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDesktopPane2Layout.createSequentialGroup()
                                    .addGap(9, 9, 9)
                                    .addComponent(Sua, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(Xoa, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGroup(jDesktopPane2Layout.createSequentialGroup()
                            .addComponent(comboTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton10)))
                    .addGroup(jDesktopPane2Layout.createSequentialGroup()
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(timKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jDesktopPane2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 336, Short.MAX_VALUE)
                        .addComponent(nhap)
                        .addGap(173, 173, 173)
                        .addComponent(AddToDB)
                        .addGap(115, 115, 115)
                        .addComponent(seeAll)
                        .addGap(63, 63, 63))
                    .addGroup(jDesktopPane2Layout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addComponent(jScrollPane1))))
        );

        jDesktopPane2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {diaChi, gioiTinh, maDG, ngaySinh, sDT, tenDG});

        jDesktopPane2Layout.setVerticalGroup(
            jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopPane2Layout.createSequentialGroup()
                .addGroup(jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jDesktopPane2Layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(maDG, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGap(25, 25, 25)
                        .addGroup(jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(tenDG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(24, 24, 24)
                        .addGroup(jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(ngaySinh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(24, 24, 24)
                        .addGroup(jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(gioiTinh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(26, 26, 26)
                        .addGroup(jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(diaChi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addGap(27, 27, 27)
                        .addGroup(jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(sDT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addGap(27, 27, 27)
                        .addGroup(jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmnd, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addGap(76, 76, 76)
                        .addGroup(jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Them, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Sua)
                            .addComponent(Xoa))
                        .addGap(28, 28, 28)
                        .addGroup(jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(timKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1))
                .addGap(29, 29, 29)
                .addGroup(jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(seeAll, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(nhap, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(AddToDB, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(comboTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(22, 22, 22))
        );

        jDesktopPane2Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {diaChi, gioiTinh, maDG, ngaySinh, sDT, tenDG});

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPane2)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPane2)
        );

        jTabbedPane1.addTab("Cập Nhật & Tìm Kiếm", jPanel3);

        TKDG.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        TKDG.setForeground(new java.awt.Color(255, 255, 255));
        TKDG.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        TKDG.setText("Thống Kê Độc Giả");
        TKDG.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        TKDG.setVerifyInputWhenFocusTarget(false);
        TKDG.setVerticalTextPosition(javax.swing.SwingConstants.TOP);

        Table2.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        Table2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        Table2.setRowHeight(26);
        jScrollPane3.setViewportView(Table2);

        jButton7.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/quanlythuvien/icon/statistic.png"))); // NOI18N
        jButton7.setText("Theo Địa Chỉ");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jButton8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/quanlythuvien/icon/statistic.png"))); // NOI18N
        jButton8.setText("Theo Giới Tính");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jButton9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/quanlythuvien/icon/statistic.png"))); // NOI18N
        jButton9.setText("Theo Năm Sinh");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel13.setText("GVHD: ThS. LÊ THỊ HOA");

        jButton4.setBackground(new java.awt.Color(13, 255, 0));
        jButton4.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/quanlythuvien/icon/if_output-1_2916359.png"))); // NOI18N
        jButton4.setText("Xuất File");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jDesktopPane1.setLayer(TKDG, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jScrollPane3, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jButton7, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jButton8, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jButton9, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jLabel13, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jButton4, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jDesktopPane1Layout = new javax.swing.GroupLayout(jDesktopPane1);
        jDesktopPane1.setLayout(jDesktopPane1Layout);
        jDesktopPane1Layout.setHorizontalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jDesktopPane1Layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(76, 76, 76)
                        .addComponent(jButton4))
                    .addGroup(jDesktopPane1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(TKDG, javax.swing.GroupLayout.PREFERRED_SIZE, 441, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 1061, Short.MAX_VALUE))
        );
        jDesktopPane1Layout.setVerticalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                .addComponent(TKDG, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton7)
                .addGap(48, 48, 48)
                .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton8)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(46, 46, 46)
                .addComponent(jButton9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(62, 62, 62))
            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 758, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(48, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPane1)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jDesktopPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Thống Kê", jPanel5);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 793, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
 // Xóa Tất Cả các dòng

    public void removeAllRow() {
        DefaultTableModel modelDelete = (DefaultTableModel) Table1.getModel();
        modelDelete.setRowCount(0);
        if (modelDelete.getRowCount() != 0) {
            modelDelete.setRowCount(0);
        }
    }

    public ArrayList<DocGia> getListDG() {          //Đọc dữ liệu trong database
        ArrayList<DocGia> docGia = new ArrayList<DocGia>();
        String sql = "SELECT * FROM quanlythuvien.docgia";

        try {
            ps = conn.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                DocGia dg = new DocGia();
                dg.setMaDG(rs.getString(1));
                dg.setTenDG(rs.getString(2));
                dg.setNgaySinh(rs.getString(3));
                dg.setGT(rs.getString(4));
                dg.setDiaChi(rs.getString(5));
                dg.setSDT(rs.getString(6));
                dg.setCMND(rs.getString(7));
                docGia.add(dg);    //thêm vào mảng
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error: " + ex.getMessage());
        }
        return docGia;
    }

    public void showTable(ArrayList<DocGia> docGia) {
        for (DocGia dg : docGia) {
            model.addRow(new Object[]{
                dg.getMaDG(), dg.getTenDG(), dg.getNgaySinh(), dg.getGT(), dg.getDiaChi(), dg.getSDT(), dg.getCMND()
            });
        }
    }

    /*--------------------------------------------- Chức Năng Cập Nhật ----------------------------------------*/
    public void clearData() {
        maDG.setText("");
        tenDG.setText("");
        ngaySinh.setText("");
        gioiTinh.setText("");
        diaChi.setText("");
        sDT.setText("");
        cmnd.setText("");
    }

    public boolean addDG(DocGia dg) {               //Thêm sách vào database
        String sql = "INSERT INTO `quanlythuvien`.`docgia` "
                + "(`MaDG_LDP`, `TenDG_LDP`, `NgaySinh_LDP`, `GT_LDP`, `DiaChi_LDP`, `SDT_LDP`, `CMND_LDP`) "
                + "VALUES (?, ?, ?, ?, ?, ?, ?);";

        try {
            ps = conn.prepareStatement(sql);
            ps.setString(1, dg.getMaDG());
            ps.setString(2, dg.getTenDG());
            ps.setString(3, dg.getNgaySinh());
            ps.setString(4, dg.getGT());
            ps.setString(5, dg.getDiaChi());
            ps.setString(6, dg.getSDT());
            ps.setString(7, dg.getCMND());

            int kt = ps.executeUpdate();
            if (kt != 0) {
                JOptionPane.showMessageDialog(null, "Bạn đã thêm dữ liệu thành công !");
                return true;
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error: " + ex.getMessage());
        }
        return false;
    }

    // update database
    public boolean update() {
        String sql = "UPDATE `quanlythuvien`.`docgia` "
                + "SET `MaDG_LDP` = ?, `TenDG_LDP` = ?, `NgaySinh_LDP` = ?, `GT_LDP` = ?, "
                + "`DiaChi_LDP` = ?, `SDT_LDP` = ?, `CMND_LDP` = ? "
                + "WHERE (`MaDG_LDP` = ? );";
        try {
            ps = conn.prepareStatement(sql);
            ps.setString(1, maDG.getText());
            ps.setString(2, tenDG.getText());
            ps.setString(3, ngaySinh.getText());
            ps.setString(4, gioiTinh.getText());
            ps.setString(5, diaChi.getText());
            ps.setString(6, sDT.getText());
            ps.setString(7, cmnd.getText());
            ps.setString(8, (Table1.getValueAt(rowID, 0)).toString());

            int kt = ps.executeUpdate();
            if (kt != 0) {
                JOptionPane.showMessageDialog(null, "Bạn đã cập nhật dữ liệu thành công");
                //  Xóa dòng tại vị trí rowID lấy từ action mouse click
                model.removeRow(rowID);
                //  Thêm bản ghi vào bảng tại vị trí rowID lấy từ action event mouse click
                model.insertRow(rowID, new Object[]{
                    maDG.getText(), tenDG.getText(), ngaySinh.getText(), gioiTinh.getText(),
                    diaChi.getText(), sDT.getText(), cmnd.getText()
                });
                clearData();
                return true;
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error: " + ex.getMessage());
        }

        return false;
    }

    public boolean remove() {                       //Xóa Sách khỏi database
        String sql = "DELETE FROM `quanlythuvien`.`docgia` WHERE (`MaDG_LDP` = ?);";
        try {
            ps = conn.prepareStatement(sql);
            ps.setString(1, Table1.getValueAt(rowID, 0).toString());
            int kt = ps.executeUpdate();
            if (kt != 0) {
                JOptionPane.showMessageDialog(null, "Bạn đã xóa dữ liệu thành công !");
                //  Xóa dòng tại vị trí rowID với rowID lấy từ action mouse click
                return true;
            }
        } catch (SQLException ex) {
//            Logger.getLogger(QuanLySach.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Error => " + ex.getMessage());
        }
        return false;
    }

    /*------------------------------------------------- Tìm Kiếm ---------------------------------------------*/
    //Tìm kiếm sách theo mã sách
    public ArrayList<DocGia> tKTheoMaDG() {
        ArrayList<DocGia> docGia = new ArrayList<DocGia>();
        String sql = "SELECT * FROM DOCGIA WHERE (MaDG_LDP = '" + timKiem.getText() + "');";

        try {
            ps = conn.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                DocGia dg = new DocGia();
                dg.setMaDG(rs.getString(1));
                dg.setTenDG(rs.getString(2));
                dg.setNgaySinh(rs.getString(3));
                dg.setGT(rs.getString(4));
                dg.setDiaChi(rs.getString(5));
                dg.setSDT(rs.getString(6));
                dg.setCMND(rs.getString(7));
                docGia.add(dg);    //thêm vào mảng
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error: " + ex.getMessage());
        }
        return docGia;
    }

    //Tìm kiếm sách theo tên sách
    public ArrayList<DocGia> tKTheoTenDG() {
        ArrayList<DocGia> docGia = new ArrayList<DocGia>();
        String sql = "SELECT * FROM quanlythuvien.docgia"
                + " Where TenDG_LDP LIKE '%" + timKiem.getText() + "%';";

        try {
            ps = conn.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                DocGia dg = new DocGia();
                dg.setMaDG(rs.getString(1));
                dg.setTenDG(rs.getString(2));
                dg.setNgaySinh(rs.getString(3));
                dg.setGT(rs.getString(4));
                dg.setDiaChi(rs.getString(5));
                dg.setSDT(rs.getString(6));
                dg.setCMND(rs.getString(7));
                docGia.add(dg);    //thêm vào mảng
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error: " + ex.getMessage());
        }
        return docGia;
    }

    //Tìm kiếm sách theo Thể loại
    public ArrayList<DocGia> tKTheoDiaChi() {
        ArrayList<DocGia> docGia = new ArrayList<DocGia>();
        String sql = "SELECT * FROM quanlythuvien.docgia"
                + " Where DiaChi_LDP LIKE '%" + timKiem.getText() + "%';";

        try {
            ps = conn.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                DocGia dg = new DocGia();
                dg.setMaDG(rs.getString(1));
                dg.setTenDG(rs.getString(2));
                dg.setNgaySinh(rs.getString(3));
                dg.setGT(rs.getString(4));
                dg.setDiaChi(rs.getString(5));
                dg.setSDT(rs.getString(6));
                dg.setCMND(rs.getString(7));
                docGia.add(dg);    //thêm vào mảng
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error: " + ex.getMessage());
        }
        return docGia;
    }

    //Tìm kiếm sách theo tên tác giả
    public ArrayList<DocGia> tKTheoSDT() {
        ArrayList<DocGia> docGia = new ArrayList<DocGia>();
        String sql = "SELECT * FROM quanlythuvien.docgia"
                + " Where SDT_LDP = ?;";

        try {
            ps = conn.prepareStatement(sql);
            ps.setInt(1, Integer.parseInt(timKiem.getText()));
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                DocGia dg = new DocGia();
                dg.setMaDG(rs.getString(1));
                dg.setTenDG(rs.getString(2));
                dg.setNgaySinh(rs.getString(3));
                dg.setGT(rs.getString(4));
                dg.setDiaChi(rs.getString(5));
                dg.setSDT(rs.getString(6));
                dg.setCMND(rs.getString(7));
                docGia.add(dg);    //thêm vào mảng
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error: " + ex.getMessage());
        }
        return docGia;
    }

    //Tìm kiếm sách theo Nhà Xuất Bản
    public ArrayList<DocGia> tKTheoCMND() {
        ArrayList<DocGia> docGia = new ArrayList<DocGia>();
        String sql = "SELECT * FROM quanlythuvien.docgia"
                + " Where CMND_LDP LIKE '%" + Integer.parseInt(timKiem.getText()) + "%';";

        try {
            ps = conn.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                DocGia dg = new DocGia();
                dg.setMaDG(rs.getString(1));
                dg.setTenDG(rs.getString(2));
                dg.setNgaySinh(rs.getString(3));
                dg.setGT(rs.getString(4));
                dg.setDiaChi(rs.getString(5));
                dg.setSDT(rs.getString(6));
                dg.setCMND(rs.getString(7));
                docGia.add(dg);    //thêm vào mảng
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error: " + ex.getMessage());
        }
        return docGia;
    }


    /*------------------------------------------------- Thống Kê ---------------------------------------------*/
    public void removeAllRowTKe() {
        DefaultTableModel modelDelete = (DefaultTableModel) Table2.getModel();
        modelDelete.setRowCount(0);
        if (modelDelete.getRowCount() != 0) {
            modelDelete.setRowCount(0);
        }
    }

    //Hàm thống kê Sách theo Tên Sách
    public ArrayList<DocGia> tKeTheoTenDG() {
        ArrayList<DocGia> docGia = new ArrayList<DocGia>();
        String sql = "SELECT TenDG_LDP, Count(TenDG_LDP) "
                + "FROM quanlythuvien.nhadgien "
                + "GROUP BY TenDG_LDP;";
        try {
            ps = conn.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                DocGia dg = new DocGia();
                dg.setTenDG(rs.getString("TenDG_LDP"));
                //   dg.setSoLuong(rs.getInt("Count(TenDG_LDP)"));
                docGia.add(dg);    //thêm vào mảng
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error: " + ex.getMessage());
        }
        return docGia;
    }

    //Hàm thống kê sách theo Thể Loại
    public ArrayList<DocGia> tKeTheoGT() {
        ArrayList<DocGia> docGia = new ArrayList<DocGia>();
        String sql = "Select TheLoai_LDP,Sum(SoLuongCon_LDP),Sum(TongSoLuong_LDP) "
                + "from quanlythuvien.sach "
                + "group by TheLoai_LDP;";
        try {
            ps = conn.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                DocGia dg = new DocGia();
                //dg.setTheLoai(rs.getString("TheLoai_LDP"));
                //dg.setSoLuongCon(rs.getInt("Sum(SoLuongCon_LDP)"));
                //dg.setTongSoLuong(rs.getInt("Sum(TongSoLuong_LDP)"));
                docGia.add(dg);    //thêm vào mảng
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error: " + ex.getMessage());
        }
        return docGia;
    }

    //Hàm thống kê sách theo Nhà Xuất Bản
    public ArrayList<Sach> tKeTheoNXB() {
        ArrayList<Sach> sach = new ArrayList<Sach>();
        String sql = "Select NXB_LDP,Sum(SoLuongCon_LDP),Sum(TongSoLuong_LDP) "
                + "from quanlythuvien.sach "
                + "group by NXB_LDP;";
        try {
            ps = conn.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                Sach s = new Sach();
                s.setTheLoai(rs.getString("NXB_LDP"));
                s.setSoLuongCon(rs.getInt("Sum(SoLuongCon_LDP)"));
                s.setTongSoLuong(rs.getInt("Sum(TongSoLuong_LDP)"));
                sach.add(s);    //thêm vào mảng
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error: " + ex.getMessage());
        }
        return sach;
    }


    private void gioiTinhActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gioiTinhActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_gioiTinhActionPerformed

    private void diaChiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_diaChiActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_diaChiActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        removeAllRowTKe();
        TKDG.setText("Thống Kê Độc Giả Theo Địa Chỉ");
        DefaultTableModel modelTK = (DefaultTableModel) Table2.getModel();
        modelTK.setColumnIdentifiers(new Object[]{
            "      STT", "      Địa Chỉ", "      Số Lượng"
        });
        int i = 0;
        String sql = "select diachi_LDP , count(DiaChi_LDP) \n"
                + "from quanlythuvien.docgia\n"
                + "group by DiaChi_LDP";
        try {
            ps = conn.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                modelTK.addRow(new Object[]{
                    ++i, rs.getString(1), rs.getString(2)
                });
            }
        } catch (SQLException ex) {
            Logger.getLogger(QuanLyDocGia.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        removeAllRowTKe();
        TKDG.setText("Thống Kê Độc Giả Theo Giới Tính");
        DefaultTableModel modelTK = (DefaultTableModel) Table2.getModel();
        modelTK.setColumnIdentifiers(new Object[]{
            "            STT", "            Giới Tính", "           Số Lượng"
        });
        int i = 0;
        String sql = "select GT_LDP , count(GT_LDP) \n"
                + "from quanlythuvien.docgia\n"
                + "group by GT_LDP";
        try {
            ps = conn.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                modelTK.addRow(new Object[]{
                    ++i, rs.getString(1), rs.getString(2)
                });
            }
        } catch (SQLException ex) {
            Logger.getLogger(QuanLyDocGia.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        removeAllRowTKe();
        TKDG.setText("Thống Kê Độc Giả Theo Năm Sinh");
        DefaultTableModel modelTK = (DefaultTableModel) Table2.getModel();
        modelTK.setColumnIdentifiers(new Object[]{
            "            STT", "            Năm Sinh", "            Số Lượng"
        });
        int i = 0;
        String sql = "Select YEAR(NgaySinh_LDP),count(YEAR(NgaySinh_LDP))\n"
                + "from quanlythuvien.docgia\n"
                + "group by YEAR(NgaySinh_LDP);";
        try {
            ps = conn.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                modelTK.addRow(new Object[]{
                    ++i, rs.getString(1), rs.getString(2)
                });
            }
        } catch (SQLException ex) {
            Logger.getLogger(QuanLyDocGia.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton9ActionPerformed

    private void comboTimKiemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboTimKiemActionPerformed
        fileOut = false;
        ArrayList<DocGia> docGia = new ArrayList<DocGia>();
        Object obj = evt.getSource();
        if (obj == comboTimKiem) {
            int index = comboTimKiem.getSelectedIndex();
            switch (index) {
                case 0:
                    docGia = tKTheoMaDG();
                    break;
                case 1:
                    docGia = tKTheoTenDG();
                    break;
                case 2:
                    docGia = tKTheoDiaChi();
                    break;
                case 3:
                    docGia = tKTheoSDT();
                    break;
                case 4:
                    docGia = tKTheoCMND();
                    break;
            }
            removeAllRow();
            showTable(docGia);
        }
    }//GEN-LAST:event_comboTimKiemActionPerformed

    private void XoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_XoaActionPerformed
        int choose = JOptionPane.showConfirmDialog(null, "Bạn có muốn thay xóa thông tin nhân viên không ?",
                "Quản Lý Nhân Viên _ Xóa", JOptionPane.YES_NO_OPTION);
        if (choose == 0) {
            boolean flag = remove();
            if (flag) {
                clearData();
                //  Xóa dòng tại vị trí rowID lấy từ action mouse click
                model.removeRow(rowID);
            }
        } else {
            clearData();
        }
    }//GEN-LAST:event_XoaActionPerformed

    private void nhapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nhapActionPerformed
        // TODO add your handling code here:
        // đường dẫn
        removeAllRow();
        String path = null;
        JFileChooser fileChooser = new JFileChooser();
        // show ra một bảng chọn file
        int rVal = fileChooser.showOpenDialog(null);
        // nếu nhấn nút ok (tuỳ chọn APPROVE_OPTION)
        if (rVal == JFileChooser.APPROVE_OPTION) {
            String fileName = fileChooser.getSelectedFile().getName();
            String dir = fileChooser.getCurrentDirectory().toString();
            path = dir + "\\" + fileName;
        } // nếu nhấn nút cancel trong bảng 
        else if (rVal == JFileChooser.CANCEL_OPTION) {
            return;
        }
        // chỗ này sẽ delete hết các dòng trước khi nhập dữ liệu từ file 
        // vector lưu tên cột
        Vector columns = new Vector();
        try {
            FileInputStream file = new FileInputStream(new File(path));
            // tạo một file excel
            XSSFWorkbook workbook = new XSSFWorkbook(file);
            // tạo một sheet trong excel có số thứ tự là 0
            XSSFSheet sheet = workbook.getSheetAt(0);
            // con trỏ duyệt hàng trong excel 
            Iterator<Row> rowIt = sheet.iterator();
            // nếu vẫn còn dòng trong file
            while (rowIt.hasNext()) {
                // tạo một dòng mới 
                Row row = rowIt.next();
                // con trỏ trỏ vào các ô trong một dòng 
                Iterator<Cell> cellIt = row.cellIterator();
                // nếu là hàng 0 
                if (row.getRowNum() != 0) {
                    //vector chứa dữ liệu trong 1 dòng để add vào bảng jtabel
                    Vector<String> rowData = new Vector<String>();
                    // nếu vẫn còn ô tiếp theo
                    while (cellIt.hasNext()) {
                        // lấy cell trong bảng excel
                        Cell cell = cellIt.next();

                        if (cell.getCellType() == CellType.STRING) {
                            rowData.add(cell.getStringCellValue().toString());
                        } // nếu cell có kiểu dữ liệu là số thì chuyển thành xâu.
                        else if (DateUtil.isCellDateFormatted(cell)) {
                            // Format Date
                            String pattern = "yyyy-MM-dd";
                            SimpleDateFormat simpleDateFormat = new SimpleDateFormat(pattern);
                            // Format cell.getDateCellValue()
                            String date = simpleDateFormat.format(cell.getDateCellValue());
                            rowData.add(date);
                        } else if (cell.getCellType() == CellType.NUMERIC) {
                            rowData.add(NumberToTextConverter.toText(cell.getNumericCellValue()));
                        }
                    }
                    // add dữ liệu vào trong bảng jtable 
                    model.addRow(rowData);

                }
            }

        } catch (FileNotFoundException ex) {
            Logger.getLogger(QuanLyDocGia.class
                    .getName()).log(Level.SEVERE, null, ex);

        } catch (IOException ex) {
            Logger.getLogger(QuanLyDocGia.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_nhapActionPerformed

    private void AddToDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddToDBActionPerformed
        //      System.out.println(Table1.getRowCount());
        DocGia dg = new DocGia();
        int n = Table1.getRowCount();
        String sql = "INSERT INTO `quanlythuvien`.`docgia` "
                + "(`MaDG_LDP`, `TenDG_LDP`, `NgaySinh_LDP`, `GT_LDP`, `DiaChi_LDP`, `SDT_LDP`, `CMND_LDP`) "
                + "VALUES (?, ?, ?, ?, ?, ?, ?);";
        for (int index = 0; index < n; index++) {
            dg.setMaDG(Table1.getValueAt(index, 0).toString());
            dg.setTenDG(Table1.getValueAt(index, 1).toString());
            dg.setNgaySinh(Table1.getValueAt(index, 2).toString());
            dg.setGT(Table1.getValueAt(index, 3).toString());
            dg.setDiaChi(Table1.getValueAt(index, 4).toString());
            dg.setSDT((Table1.getValueAt(index, 5).toString()));
            dg.setCMND(Table1.getValueAt(index, 6).toString());
            try {
                ps = conn.prepareStatement(sql);
                ps.setString(1, dg.getMaDG());
                ps.setString(2, dg.getTenDG());
                ps.setString(3, dg.getNgaySinh());
                ps.setString(4, dg.getGT());
                ps.setString(5, dg.getDiaChi());
                ps.setString(6, dg.getSDT());
                ps.setString(7, dg.getCMND());

                int kt = ps.executeUpdate();
                if (kt != 0) {
                    // Dòng bắt đầu đếm từ 0 nhưng cột lại bắt đàu đếm từ 0
                    model.removeRow(index);
                    n--;
                    index--;
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "Error ! " + ex.getMessage()
                        + " \". Hãy sửa trực tiếp trên bảng và ấn \"Thêm vào CSDL\" để tiếp tục thêm.");
            }
        }
    }//GEN-LAST:event_AddToDBActionPerformed

    private void seeAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seeAllActionPerformed
        fileOut = true;
        removeAllRow();
        clearData();
        showTable(getListDG());
    }//GEN-LAST:event_seeAllActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        String f0 = System.getProperty("user.home");
        String f1 = "\\Documents\\NetBeansProjects\\Quanlythuvien\\Quản Lý Độc Giả\\";
        String f2 = null;
        if (fileOut == true) {
            f2 = "Thông Tin Độc Giả.docx";
        } else {
            if (comboTimKiem.getSelectedItem().equals("Tìm Kiếm Theo Mã Độc Giả")) {
                f2 = "Tìm Kiếm Theo Mã Độc Giả.docx";
            } else if (comboTimKiem.getSelectedItem().equals("Tìm Kiếm Theo Tên Độc Giả")) {
                f2 = "Tìm Kiếm Theo Tên Độc Giả.docx";
            } else if (comboTimKiem.getSelectedItem().equals("Tìm Kiếm Theo Địa Chỉ")) {
                f2 = "Tìm Kiếm Theo Địa Chỉ.docx";
            } else if (comboTimKiem.getSelectedItem().equals("Tìm Kiếm Theo SĐT")) {
                f2 = "Tìm Kiếm Theo SĐT.docx";
            } else {
                f2 = "Tìm Kiếm Theo CMND.docx";
            }
        }
        String fileName = f0 + f1 + f2;

        try {
            InputStream file = new FileInputStream(fileName);
            XWPFDocument docx = new XWPFDocument(OPCPackage.open(file));
            Iterator bodyElementIterator = docx.getBodyElementsIterator();
            for (XWPFParagraph p : docx.getParagraphs()) {
                List<XWPFRun> runs = p.getRuns();
                if (runs != null) {
                    for (XWPFRun r : runs) {
                        r.setFontSize(12);
                        r.setFontFamily("Times New Roman");
                        String text = r.getText(0);
                        if (text != null && text.contains("ngayxxx")) {
                            SimpleDateFormat day = new SimpleDateFormat("dd");
                            SimpleDateFormat month = new SimpleDateFormat("MM");
                            SimpleDateFormat year = new SimpleDateFormat("yyyy");
                            Date date = new Date();
                            String ngay = day.format(date);
                            String thang = month.format(date);
                            String nam = year.format(date);
                            text = text.replace("ngayxxx", "Ngày  " + ngay + "  tháng  " + thang + "  năm  " + nam);
                            r.setText(text, 0);
                            break;
                        }
                    }
                }
            }
            while (bodyElementIterator.hasNext()) {
                IBodyElement element = (IBodyElement) bodyElementIterator.next();
                if ("TABLE".equalsIgnoreCase(element.getElementType().name())) {
                    //Danh sách tất cả Table trong file word
                    List<XWPFTable> tableList = element.getBody().getTables();

                    //Duyệt qua danh sách tất cả các table
                    for (XWPFTable table : tableList) {
                        //Căn bảng ở giữa file
                        table.setTableAlignment(TableRowAlign.CENTER);
                        //  Xóa các dòng thừa trước khi thêm mới
                        while (table.getRow(1) != null) {
                            table.removeRow(1);
                        }
                        //Thêm các dòng từ jTable vào table trong word
                        for (int i = 1; i <= Table1.getRowCount(); i++) {
                            XWPFTableRow newRow = table.createRow();
                            for (int j = 0; j < table.getRow(i).getTableCells().size(); j++) {
                                newRow.getCell(j).setText(Table1.getValueAt(i - 1, j).toString());
                            }
                        }
                    }
                }
            }
            OutputStream out = new FileOutputStream(f2);
            docx.write(out);
            out.close();
        } catch (IOException | InvalidFormatException ex) {
            Logger.getLogger(QuanLyDocGia.class.getName()).log(Level.SEVERE, null, ex);
        }

        //Mở file
        try {
            File myFile = new File(f0 + "\\Documents\\NetBeansProjects\\Quanlythuvien\\" + f2);
            Desktop.getDesktop().open(myFile);
        } catch (IOException ex) {
            // no application registered for PDFs
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jButton10ActionPerformed

    private void ThemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ThemActionPerformed
        DocGia dg = new DocGia();
        dg.setMaDG(maDG.getText());
        dg.setTenDG(tenDG.getText());
        dg.setNgaySinh(ngaySinh.getText());
        dg.setGT(gioiTinh.getText());
        dg.setDiaChi(diaChi.getText());
        dg.setSDT(sDT.getText());
        dg.setCMND(cmnd.getText());
        boolean flag = addDG(dg);                         //Nếu thêm sách thành công
        if (flag) {
            model.addRow(new Object[]{
                dg.getMaDG(), dg.getTenDG(), dg.getNgaySinh(), dg.getGT(), dg.getDiaChi(),
                dg.getSDT(), dg.getCMND()
            });
            clearData();
        }
    }//GEN-LAST:event_ThemActionPerformed

    private void SuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SuaActionPerformed
        int choose = JOptionPane.showConfirmDialog(null, "Bạn có muốn thay đổi dữ liệu không ?",
                "Quản Lý Nhân Viên _ Sửa", JOptionPane.YES_NO_OPTION);
        if (choose == 0) {
            boolean flag = update();
            if (flag) {
                clearData();
            }
        }
    }//GEN-LAST:event_SuaActionPerformed

    private void Table1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Table1MouseClicked
        rowID = Table1.getSelectedRow();
        maDG.setText(Table1.getValueAt(rowID, 0).toString());
        tenDG.setText(Table1.getValueAt(rowID, 1).toString());
        ngaySinh.setText(Table1.getValueAt(rowID, 2).toString());
        gioiTinh.setText(Table1.getValueAt(rowID, 3).toString());
        diaChi.setText(Table1.getValueAt(rowID, 4).toString());
        sDT.setText(Table1.getValueAt(rowID, 5).toString());
        cmnd.setText(Table1.getValueAt(rowID, 6).toString());
    }//GEN-LAST:event_Table1MouseClicked

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        String f0 = System.getProperty("user.home");
        String f1 = "\\Documents\\NetBeansProjects\\Quanlythuvien\\Quản Lý Độc Giả\\";
        String f2 = null;
        if (TKDG.getText().equals("Thống Kê Độc Giả Theo Địa Chỉ")) {
            f2 = "Thống Kê Theo Địa Chỉ.docx";
        } else if (TKDG.getText().equals("Thống Kê Độc Giả Theo Giới Tính")) {
            f2 = "Thống Kê Theo Giới Tính.docx";
        } else if (TKDG.getText().equals("Thống Kê Độc Giả Theo Năm Sinh")) {
            f2 = "Thống Kê Theo Năm Sinh.docx";
        }
        String fileName = f0 + f1 + f2;

        try {
            InputStream file = new FileInputStream(fileName);
            XWPFDocument docx = new XWPFDocument(OPCPackage.open(file));
            Iterator bodyElementIterator = docx.getBodyElementsIterator();
            for (XWPFParagraph p : docx.getParagraphs()) {
                List<XWPFRun> runs = p.getRuns();
                if (runs != null) {
                    for (XWPFRun r : runs) {
                        r.setFontSize(12);
                        r.setFontFamily("Times New Roman");
                        String text = r.getText(0);
                        if (text != null && text.contains("ngayxxx")) {
                            SimpleDateFormat day = new SimpleDateFormat("dd");
                            SimpleDateFormat month = new SimpleDateFormat("MM");
                            SimpleDateFormat year = new SimpleDateFormat("yyyy");
                            Date date = new Date();
                            String ngay = day.format(date);
                            String thang = month.format(date);
                            String nam = year.format(date);
                            text = text.replace("ngayxxx", "Ngày  " + ngay + "  tháng  " + thang + "  năm  " + nam);
                            r.setText(text, 0);
                            break;
                        }
                    }
                }
            }
            while (bodyElementIterator.hasNext()) {
                IBodyElement element = (IBodyElement) bodyElementIterator.next();
                if ("TABLE".equalsIgnoreCase(element.getElementType().name())) {
                    //Danh sách tất cả Table trong file word
                    List<XWPFTable> tableList = element.getBody().getTables();

                    //Duyệt qua danh sách tất cả các table
                    for (XWPFTable table : tableList) {
                        //Căn bảng ở giữa file
                        table.setTableAlignment(TableRowAlign.CENTER);
                        //  Xóa các dòng thừa trước khi thêm mới
                        while (table.getRow(1) != null) {
                            table.removeRow(1);
                        }
                        //Thêm các dòng từ jTable vào table trong word
                        for (int i = 1; i <= Table2.getRowCount(); i++) {
                            XWPFTableRow newRow = table.createRow();
                            for (int j = 0; j < table.getRow(i).getTableCells().size(); j++) {
                                newRow.getCell(j).setText(Table2.getValueAt(i - 1, j).toString());
                            }
                        }
                    }
                }
            }
            OutputStream out = new FileOutputStream(f2);
            docx.write(out);
            out.close();
        } catch (IOException | InvalidFormatException ex) {
            Logger.getLogger(QuanLyDocGia.class.getName()).log(Level.SEVERE, null, ex);
        }

        //Mở file
        try {
            File myFile = new File(f0 + "\\Documents\\NetBeansProjects\\Quanlythuvien\\" + f2);
            Desktop.getDesktop().open(myFile);
        } catch (IOException ex) {
            // no application registered for PDFs
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(QuanLyDocGia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(QuanLyDocGia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(QuanLyDocGia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(QuanLyDocGia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new QuanLyDocGia().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddToDB;
    private javax.swing.JButton Sua;
    private javax.swing.JLabel TKDG;
    private javax.swing.JTable Table1;
    private javax.swing.JTable Table2;
    private javax.swing.JButton Them;
    private javax.swing.JButton Xoa;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JTextField cmnd;
    private javax.swing.JComboBox<String> comboTimKiem;
    private javax.swing.JTextField diaChi;
    private javax.swing.JTextField gioiTinh;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JDesktopPane jDesktopPane2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField maDG;
    private javax.swing.JTextField ngaySinh;
    private javax.swing.JButton nhap;
    private javax.swing.JTextField sDT;
    private javax.swing.JButton seeAll;
    private javax.swing.JTextField tenDG;
    private javax.swing.JTextField timKiem;
    // End of variables declaration//GEN-END:variables
}
